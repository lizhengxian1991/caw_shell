// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/ImportantFileWriterAndroid

#ifndef org_chromium_base_ImportantFileWriterAndroid_JNI
#define org_chromium_base_ImportantFileWriterAndroid_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kImportantFileWriterAndroidClassPath[] =
    "org/chromium/base/ImportantFileWriterAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ImportantFileWriterAndroid_clazz = NULL;
}  // namespace

namespace base {
namespace android {

static jboolean WriteFileAtomically(JNIEnv* env, jclass clazz,
    jstring fileName,
    jbyteArray data);

// Step 2: method stubs.

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_ImportantFileWriterAndroid_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kImportantFileWriterAndroidClassPath).obj()));
  static const JNINativeMethod kMethodsImportantFileWriterAndroid[] = {
    { "nativeWriteFileAtomically",
"("
"Ljava/lang/String;"
"[B"
")"
"Z", reinterpret_cast<void*>(WriteFileAtomically) },
  };
  const int kMethodsImportantFileWriterAndroidSize =
      arraysize(kMethodsImportantFileWriterAndroid);

  if (env->RegisterNatives(g_ImportantFileWriterAndroid_clazz,
                           kMethodsImportantFileWriterAndroid,
                           kMethodsImportantFileWriterAndroidSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace android
}  // namespace base

#endif  // org_chromium_base_ImportantFileWriterAndroid_JNI
