// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/ActivityStatus

#ifndef org_chromium_base_ActivityStatus_JNI
#define org_chromium_base_ActivityStatus_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kActivityStatusClassPath[] =
    "org/chromium/base/ActivityStatus";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ActivityStatus_clazz = NULL;
}  // namespace

namespace base {
namespace android {

static void OnActivityStateChange(JNIEnv* env, jclass clazz,
    jint newState);

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_ActivityStatus_registerThreadSafeNativeStateListener = 0;
static void Java_ActivityStatus_registerThreadSafeNativeStateListener(JNIEnv*
    env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ActivityStatus_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ActivityStatus_clazz,
      "registerThreadSafeNativeStateListener",

"("
")"
"V",
      &g_ActivityStatus_registerThreadSafeNativeStateListener);

  env->CallStaticVoidMethod(g_ActivityStatus_clazz,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_ActivityStatus_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kActivityStatusClassPath).obj()));
  static const JNINativeMethod kMethodsActivityStatus[] = {
    { "nativeOnActivityStateChange",
"("
"I"
")"
"V", reinterpret_cast<void*>(OnActivityStateChange) },
  };
  const int kMethodsActivityStatusSize = arraysize(kMethodsActivityStatus);

  if (env->RegisterNatives(g_ActivityStatus_clazz,
                           kMethodsActivityStatus,
                           kMethodsActivityStatusSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace android
}  // namespace base

#endif  // org_chromium_base_ActivityStatus_JNI
