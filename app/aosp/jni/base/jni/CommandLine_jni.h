// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/CommandLine

#ifndef org_chromium_base_CommandLine_JNI
#define org_chromium_base_CommandLine_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kCommandLineClassPath[] =
    "org/chromium/base/CommandLine";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_CommandLine_clazz = NULL;
}  // namespace

static void Reset(JNIEnv* env, jclass clazz);

static jboolean HasSwitch(JNIEnv* env, jclass clazz,
    jstring switchString);

static jstring GetSwitchValue(JNIEnv* env, jclass clazz,
    jstring switchString);

static void AppendSwitch(JNIEnv* env, jclass clazz,
    jstring switchString);

static void AppendSwitchWithValue(JNIEnv* env, jclass clazz,
    jstring switchString,
    jstring value);

static void AppendSwitchesAndArguments(JNIEnv* env, jclass clazz,
    jobjectArray array);

// Step 2: method stubs.

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_CommandLine_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kCommandLineClassPath).obj()));
  static const JNINativeMethod kMethodsCommandLine[] = {
    { "nativeReset",
"("
")"
"V", reinterpret_cast<void*>(Reset) },
    { "nativeHasSwitch",
"("
"Ljava/lang/String;"
")"
"Z", reinterpret_cast<void*>(HasSwitch) },
    { "nativeGetSwitchValue",
"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetSwitchValue) },
    { "nativeAppendSwitch",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(AppendSwitch) },
    { "nativeAppendSwitchWithValue",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(AppendSwitchWithValue) },
    { "nativeAppendSwitchesAndArguments",
"("
"[Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(AppendSwitchesAndArguments) },
  };
  const int kMethodsCommandLineSize = arraysize(kMethodsCommandLine);

  if (env->RegisterNatives(g_CommandLine_clazz,
                           kMethodsCommandLine,
                           kMethodsCommandLineSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_chromium_base_CommandLine_JNI
