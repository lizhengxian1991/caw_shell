// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AndroidProtocolHandler

#ifndef org_chromium_android_webview_AndroidProtocolHandler_JNI
#define org_chromium_android_webview_AndroidProtocolHandler_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kAndroidProtocolHandlerClassPath[] =
    "org/chromium/android_webview/AndroidProtocolHandler";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_AndroidProtocolHandler_clazz = NULL;
}  // namespace

namespace android_webview {

static void SetResourceContextForTesting(JNIEnv* env, jclass clazz,
    jobject context);

static jstring GetAndroidAssetPath(JNIEnv* env, jclass clazz);

static jstring GetAndroidResourcePath(JNIEnv* env, jclass clazz);

// Step 2: method stubs.

static base::subtle::AtomicWord g_AndroidProtocolHandler_open = 0;
static ScopedJavaLocalRef<jobject> Java_AndroidProtocolHandler_open(JNIEnv* env,
    jobject context,
    jstring url) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidProtocolHandler_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidProtocolHandler_clazz,
      "open",

"("
"Landroid/content/Context;"
"Ljava/lang/String;"
")"
"Ljava/io/InputStream;",
      &g_AndroidProtocolHandler_open);

  jobject ret =
    env->CallStaticObjectMethod(g_AndroidProtocolHandler_clazz,
      method_id, context, url);

  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_AndroidProtocolHandler_getMimeType = 0;
static ScopedJavaLocalRef<jstring>
    Java_AndroidProtocolHandler_getMimeType(JNIEnv* env, jobject context,
    jobject stream,
    jstring url) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidProtocolHandler_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidProtocolHandler_clazz,
      "getMimeType",

"("
"Landroid/content/Context;"
"Ljava/io/InputStream;"
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
      &g_AndroidProtocolHandler_getMimeType);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(g_AndroidProtocolHandler_clazz,
      method_id, context, stream, url));

  return ScopedJavaLocalRef<jstring>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_AndroidProtocolHandler_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kAndroidProtocolHandlerClassPath).obj()));
  static const JNINativeMethod kMethodsAndroidProtocolHandler[] = {
    { "nativeSetResourceContextForTesting",
"("
"Landroid/content/Context;"
")"
"V", reinterpret_cast<void*>(SetResourceContextForTesting) },
    { "nativeGetAndroidAssetPath",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetAndroidAssetPath) },
    { "nativeGetAndroidResourcePath",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetAndroidResourcePath) },
  };
  const int kMethodsAndroidProtocolHandlerSize =
      arraysize(kMethodsAndroidProtocolHandler);

  if (env->RegisterNatives(g_AndroidProtocolHandler_clazz,
                           kMethodsAndroidProtocolHandler,
                           kMethodsAndroidProtocolHandlerSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace android_webview

#endif  // org_chromium_android_webview_AndroidProtocolHandler_JNI
