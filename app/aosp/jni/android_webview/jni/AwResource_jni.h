// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwResource

#ifndef org_chromium_android_webview_AwResource_JNI
#define org_chromium_android_webview_AwResource_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kAwResourceClassPath[] =
    "org/chromium/android_webview/AwResource";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_AwResource_clazz = NULL;
}  // namespace

namespace android_webview {
namespace AwResource {

// Step 2: method stubs.

static base::subtle::AtomicWord g_AwResource_getDefaultTextEncoding = 0;
static ScopedJavaLocalRef<jstring>
    Java_AwResource_getDefaultTextEncoding(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwResource_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AwResource_clazz,
      "getDefaultTextEncoding",

"("
")"
"Ljava/lang/String;",
      &g_AwResource_getDefaultTextEncoding);

  jstring ret =
    static_cast<jstring>(env->CallStaticObjectMethod(g_AwResource_clazz,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwResource_getNoDomainPageContent = 0;
static ScopedJavaLocalRef<jstring>
    Java_AwResource_getNoDomainPageContent(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwResource_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AwResource_clazz,
      "getNoDomainPageContent",

"("
")"
"Ljava/lang/String;",
      &g_AwResource_getNoDomainPageContent);

  jstring ret =
    static_cast<jstring>(env->CallStaticObjectMethod(g_AwResource_clazz,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwResource_getLoadErrorPageContent = 0;
static ScopedJavaLocalRef<jstring>
    Java_AwResource_getLoadErrorPageContent(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwResource_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AwResource_clazz,
      "getLoadErrorPageContent",

"("
")"
"Ljava/lang/String;",
      &g_AwResource_getLoadErrorPageContent);

  jstring ret =
    static_cast<jstring>(env->CallStaticObjectMethod(g_AwResource_clazz,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_AwResource_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kAwResourceClassPath).obj()));
  return true;
}
}  // namespace AwResource
}  // namespace android_webview

#endif  // org_chromium_android_webview_AwResource_JNI
