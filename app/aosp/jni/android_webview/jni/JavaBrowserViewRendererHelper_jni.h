// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/JavaBrowserViewRendererHelper

#ifndef org_chromium_android_webview_JavaBrowserViewRendererHelper_JNI
#define org_chromium_android_webview_JavaBrowserViewRendererHelper_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kJavaBrowserViewRendererHelperClassPath[] =
    "org/chromium/android_webview/JavaBrowserViewRendererHelper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_JavaBrowserViewRendererHelper_clazz = NULL;
}  // namespace

namespace android_webview {

// Step 2: method stubs.

static base::subtle::AtomicWord g_JavaBrowserViewRendererHelper_createBitmap =
    0;
static ScopedJavaLocalRef<jobject>
    Java_JavaBrowserViewRendererHelper_createBitmap(JNIEnv* env, jint width,
    jint height,
    jobject canvas,
    jlong ownerKey) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_JavaBrowserViewRendererHelper_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_JavaBrowserViewRendererHelper_clazz,
      "createBitmap",

"("
"I"
"I"
"Landroid/graphics/Canvas;"
"J"
")"
"Landroid/graphics/Bitmap;",
      &g_JavaBrowserViewRendererHelper_createBitmap);

  jobject ret =
    env->CallStaticObjectMethod(g_JavaBrowserViewRendererHelper_clazz,
      method_id, width, height, canvas, ownerKey);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_JavaBrowserViewRendererHelper_drawBitmapIntoCanvas = 0;
static void Java_JavaBrowserViewRendererHelper_drawBitmapIntoCanvas(JNIEnv* env,
    jobject bitmap,
    jobject canvas,
    jint x,
    jint y) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_JavaBrowserViewRendererHelper_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_JavaBrowserViewRendererHelper_clazz,
      "drawBitmapIntoCanvas",

"("
"Landroid/graphics/Bitmap;"
"Landroid/graphics/Canvas;"
"I"
"I"
")"
"V",
      &g_JavaBrowserViewRendererHelper_drawBitmapIntoCanvas);

  env->CallStaticVoidMethod(g_JavaBrowserViewRendererHelper_clazz,
      method_id, bitmap, canvas, x, y);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_JavaBrowserViewRendererHelper_recordBitmapIntoPicture = 0;
static ScopedJavaLocalRef<jobject>
    Java_JavaBrowserViewRendererHelper_recordBitmapIntoPicture(JNIEnv* env,
    jobject bitmap) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_JavaBrowserViewRendererHelper_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_JavaBrowserViewRendererHelper_clazz,
      "recordBitmapIntoPicture",

"("
"Landroid/graphics/Bitmap;"
")"
"Landroid/graphics/Picture;",
      &g_JavaBrowserViewRendererHelper_recordBitmapIntoPicture);

  jobject ret =
    env->CallStaticObjectMethod(g_JavaBrowserViewRendererHelper_clazz,
      method_id, bitmap);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_JavaBrowserViewRendererHelper_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kJavaBrowserViewRendererHelperClassPath).obj()));
  return true;
}
}  // namespace android_webview

#endif  // org_chromium_android_webview_JavaBrowserViewRendererHelper_JNI
