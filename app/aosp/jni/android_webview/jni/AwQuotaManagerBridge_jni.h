// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwQuotaManagerBridge

#ifndef org_chromium_android_webview_AwQuotaManagerBridge_JNI
#define org_chromium_android_webview_AwQuotaManagerBridge_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kAwQuotaManagerBridgeClassPath[] =
    "org/chromium/android_webview/AwQuotaManagerBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_AwQuotaManagerBridge_clazz = NULL;
}  // namespace

namespace android_webview {

static jlong GetDefaultNativeAwQuotaManagerBridge(JNIEnv* env, jclass clazz);

// Step 2: method stubs.
static void Init(JNIEnv* env, jobject obj,
    jlong nativeAwQuotaManagerBridgeImpl) {
  DCHECK(nativeAwQuotaManagerBridgeImpl) << "Init";
  AwQuotaManagerBridgeImpl* native =
      reinterpret_cast<AwQuotaManagerBridgeImpl*>(nativeAwQuotaManagerBridgeImpl);
  return native->Init(env, obj);
}

static void DeleteAllData(JNIEnv* env, jobject obj,
    jlong nativeAwQuotaManagerBridgeImpl) {
  DCHECK(nativeAwQuotaManagerBridgeImpl) << "DeleteAllData";
  AwQuotaManagerBridgeImpl* native =
      reinterpret_cast<AwQuotaManagerBridgeImpl*>(nativeAwQuotaManagerBridgeImpl);
  return native->DeleteAllData(env, obj);
}

static void DeleteOrigin(JNIEnv* env, jobject obj,
    jlong nativeAwQuotaManagerBridgeImpl,
    jstring origin) {
  DCHECK(nativeAwQuotaManagerBridgeImpl) << "DeleteOrigin";
  AwQuotaManagerBridgeImpl* native =
      reinterpret_cast<AwQuotaManagerBridgeImpl*>(nativeAwQuotaManagerBridgeImpl);
  return native->DeleteOrigin(env, obj, origin);
}

static void GetOrigins(JNIEnv* env, jobject obj,
    jlong nativeAwQuotaManagerBridgeImpl,
    jint callbackId) {
  DCHECK(nativeAwQuotaManagerBridgeImpl) << "GetOrigins";
  AwQuotaManagerBridgeImpl* native =
      reinterpret_cast<AwQuotaManagerBridgeImpl*>(nativeAwQuotaManagerBridgeImpl);
  return native->GetOrigins(env, obj, callbackId);
}

static void GetUsageAndQuotaForOrigin(JNIEnv* env, jobject obj,
    jlong nativeAwQuotaManagerBridgeImpl,
    jstring origin,
    jint callbackId,
    jboolean isQuota) {
  DCHECK(nativeAwQuotaManagerBridgeImpl) << "GetUsageAndQuotaForOrigin";
  AwQuotaManagerBridgeImpl* native =
      reinterpret_cast<AwQuotaManagerBridgeImpl*>(nativeAwQuotaManagerBridgeImpl);
  return native->GetUsageAndQuotaForOrigin(env, obj, origin, callbackId,
      isQuota);
}

static base::subtle::AtomicWord g_AwQuotaManagerBridge_onGetOriginsCallback = 0;
static void Java_AwQuotaManagerBridge_onGetOriginsCallback(JNIEnv* env, jobject
    obj, jint callbackId,
    jobjectArray origin,
    jlongArray usages,
    jlongArray quotas) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwQuotaManagerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwQuotaManagerBridge_clazz,
      "onGetOriginsCallback",

"("
"I"
"[Ljava/lang/String;"
"[J"
"[J"
")"
"V",
      &g_AwQuotaManagerBridge_onGetOriginsCallback);

  env->CallVoidMethod(obj,
      method_id, callbackId, origin, usages, quotas);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_AwQuotaManagerBridge_onGetUsageAndQuotaForOriginCallback = 0;
static void
    Java_AwQuotaManagerBridge_onGetUsageAndQuotaForOriginCallback(JNIEnv* env,
    jobject obj, jint callbackId,
    jboolean isQuota,
    jlong usage,
    jlong quota) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwQuotaManagerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwQuotaManagerBridge_clazz,
      "onGetUsageAndQuotaForOriginCallback",

"("
"I"
"Z"
"J"
"J"
")"
"V",
      &g_AwQuotaManagerBridge_onGetUsageAndQuotaForOriginCallback);

  env->CallVoidMethod(obj,
      method_id, callbackId, isQuota, usage, quota);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_AwQuotaManagerBridge_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kAwQuotaManagerBridgeClassPath).obj()));
  static const JNINativeMethod kMethodsAwQuotaManagerBridge[] = {
    { "nativeGetDefaultNativeAwQuotaManagerBridge",
"("
")"
"J", reinterpret_cast<void*>(GetDefaultNativeAwQuotaManagerBridge) },
    { "nativeInit",
"("
"J"
")"
"V", reinterpret_cast<void*>(Init) },
    { "nativeDeleteAllData",
"("
"J"
")"
"V", reinterpret_cast<void*>(DeleteAllData) },
    { "nativeDeleteOrigin",
"("
"J"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(DeleteOrigin) },
    { "nativeGetOrigins",
"("
"J"
"I"
")"
"V", reinterpret_cast<void*>(GetOrigins) },
    { "nativeGetUsageAndQuotaForOrigin",
"("
"J"
"Ljava/lang/String;"
"I"
"Z"
")"
"V", reinterpret_cast<void*>(GetUsageAndQuotaForOrigin) },
  };
  const int kMethodsAwQuotaManagerBridgeSize =
      arraysize(kMethodsAwQuotaManagerBridge);

  if (env->RegisterNatives(g_AwQuotaManagerBridge_clazz,
                           kMethodsAwQuotaManagerBridge,
                           kMethodsAwQuotaManagerBridgeSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace android_webview

#endif  // org_chromium_android_webview_AwQuotaManagerBridge_JNI
