// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwWebContentsDelegate

#ifndef org_chromium_android_webview_AwWebContentsDelegate_JNI
#define org_chromium_android_webview_AwWebContentsDelegate_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kAwWebContentsDelegateClassPath[] =
    "org/chromium/android_webview/AwWebContentsDelegate";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_AwWebContentsDelegate_clazz = NULL;
}  // namespace

namespace android_webview {

static void FilesSelectedInChooser(JNIEnv* env, jclass clazz,
    jint processId,
    jint renderId,
    jint mode_flags,
    jobjectArray filePath);

// Step 2: method stubs.

static base::subtle::AtomicWord g_AwWebContentsDelegate_runFileChooser = 0;
static void Java_AwWebContentsDelegate_runFileChooser(JNIEnv* env, jobject obj,
    jint processId,
    jint renderId,
    jint mode_flags,
    jstring acceptTypes,
    jstring title,
    jstring defaultFilename,
    jboolean capture) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwWebContentsDelegate_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwWebContentsDelegate_clazz,
      "runFileChooser",

"("
"I"
"I"
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
")"
"V",
      &g_AwWebContentsDelegate_runFileChooser);

  env->CallVoidMethod(obj,
      method_id, processId, renderId, mode_flags, acceptTypes, title,
          defaultFilename, capture);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_AwWebContentsDelegate_addNewContents = 0;
static jboolean Java_AwWebContentsDelegate_addNewContents(JNIEnv* env, jobject
    obj, jboolean isDialog,
    jboolean isUserGesture) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwWebContentsDelegate_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwWebContentsDelegate_clazz,
      "addNewContents",

"("
"Z"
"Z"
")"
"Z",
      &g_AwWebContentsDelegate_addNewContents);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id, isDialog, isUserGesture);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwWebContentsDelegate_closeContents = 0;
static void Java_AwWebContentsDelegate_closeContents(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwWebContentsDelegate_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwWebContentsDelegate_clazz,
      "closeContents",

"("
")"
"V",
      &g_AwWebContentsDelegate_closeContents);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_AwWebContentsDelegate_activateContents = 0;
static void Java_AwWebContentsDelegate_activateContents(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwWebContentsDelegate_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwWebContentsDelegate_clazz,
      "activateContents",

"("
")"
"V",
      &g_AwWebContentsDelegate_activateContents);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_AwWebContentsDelegate_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kAwWebContentsDelegateClassPath).obj()));
  static const JNINativeMethod kMethodsAwWebContentsDelegate[] = {
    { "nativeFilesSelectedInChooser",
"("
"I"
"I"
"I"
"[Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(FilesSelectedInChooser) },
  };
  const int kMethodsAwWebContentsDelegateSize =
      arraysize(kMethodsAwWebContentsDelegate);

  if (env->RegisterNatives(g_AwWebContentsDelegate_clazz,
                           kMethodsAwWebContentsDelegate,
                           kMethodsAwWebContentsDelegateSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace android_webview

#endif  // org_chromium_android_webview_AwWebContentsDelegate_JNI
