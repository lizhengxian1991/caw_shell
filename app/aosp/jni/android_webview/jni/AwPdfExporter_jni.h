// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwPdfExporter

#ifndef org_chromium_android_webview_AwPdfExporter_JNI
#define org_chromium_android_webview_AwPdfExporter_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kAwPdfExporterClassPath[] =
    "org/chromium/android_webview/AwPdfExporter";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_AwPdfExporter_clazz = NULL;
}  // namespace

namespace android_webview {

// Step 2: method stubs.
static void ExportToPdf(JNIEnv* env, jobject obj,
    jlong nativeAwPdfExporter,
    jint fd,
    jobject cancellationSignal) {
  DCHECK(nativeAwPdfExporter) << "ExportToPdf";
  AwPdfExporter* native = reinterpret_cast<AwPdfExporter*>(nativeAwPdfExporter);
  return native->ExportToPdf(env, obj, fd, cancellationSignal);
}

static base::subtle::AtomicWord g_AwPdfExporter_setNativeAwPdfExporter = 0;
static void Java_AwPdfExporter_setNativeAwPdfExporter(JNIEnv* env, jobject obj,
    jint nativePdfExporter) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwPdfExporter_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwPdfExporter_clazz,
      "setNativeAwPdfExporter",

"("
"I"
")"
"V",
      &g_AwPdfExporter_setNativeAwPdfExporter);

  env->CallVoidMethod(obj,
      method_id, nativePdfExporter);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_AwPdfExporter_didExportPdf = 0;
static void Java_AwPdfExporter_didExportPdf(JNIEnv* env, jobject obj, jboolean
    success) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwPdfExporter_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwPdfExporter_clazz,
      "didExportPdf",

"("
"Z"
")"
"V",
      &g_AwPdfExporter_didExportPdf);

  env->CallVoidMethod(obj,
      method_id, success);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_AwPdfExporter_getPageWidth = 0;
static jint Java_AwPdfExporter_getPageWidth(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwPdfExporter_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwPdfExporter_clazz,
      "getPageWidth",

"("
")"
"I",
      &g_AwPdfExporter_getPageWidth);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwPdfExporter_getPageHeight = 0;
static jint Java_AwPdfExporter_getPageHeight(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwPdfExporter_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwPdfExporter_clazz,
      "getPageHeight",

"("
")"
"I",
      &g_AwPdfExporter_getPageHeight);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwPdfExporter_getDpi = 0;
static jint Java_AwPdfExporter_getDpi(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwPdfExporter_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwPdfExporter_clazz,
      "getDpi",

"("
")"
"I",
      &g_AwPdfExporter_getDpi);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwPdfExporter_getLeftMargin = 0;
static jint Java_AwPdfExporter_getLeftMargin(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwPdfExporter_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwPdfExporter_clazz,
      "getLeftMargin",

"("
")"
"I",
      &g_AwPdfExporter_getLeftMargin);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwPdfExporter_getRightMargin = 0;
static jint Java_AwPdfExporter_getRightMargin(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwPdfExporter_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwPdfExporter_clazz,
      "getRightMargin",

"("
")"
"I",
      &g_AwPdfExporter_getRightMargin);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwPdfExporter_getTopMargin = 0;
static jint Java_AwPdfExporter_getTopMargin(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwPdfExporter_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwPdfExporter_clazz,
      "getTopMargin",

"("
")"
"I",
      &g_AwPdfExporter_getTopMargin);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwPdfExporter_getBottomMargin = 0;
static jint Java_AwPdfExporter_getBottomMargin(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwPdfExporter_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwPdfExporter_clazz,
      "getBottomMargin",

"("
")"
"I",
      &g_AwPdfExporter_getBottomMargin);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_AwPdfExporter_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kAwPdfExporterClassPath).obj()));
  static const JNINativeMethod kMethodsAwPdfExporter[] = {
    { "nativeExportToPdf",
"("
"J"
"I"
"Landroid/os/CancellationSignal;"
")"
"V", reinterpret_cast<void*>(ExportToPdf) },
  };
  const int kMethodsAwPdfExporterSize = arraysize(kMethodsAwPdfExporter);

  if (env->RegisterNatives(g_AwPdfExporter_clazz,
                           kMethodsAwPdfExporter,
                           kMethodsAwPdfExporterSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace android_webview

#endif  // org_chromium_android_webview_AwPdfExporter_JNI
