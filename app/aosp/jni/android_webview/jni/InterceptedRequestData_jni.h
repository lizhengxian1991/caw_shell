// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/InterceptedRequestData

#ifndef org_chromium_android_webview_InterceptedRequestData_JNI
#define org_chromium_android_webview_InterceptedRequestData_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kInterceptedRequestDataClassPath[] =
    "org/chromium/android_webview/InterceptedRequestData";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_InterceptedRequestData_clazz = NULL;
}  // namespace

namespace android_webview {

// Step 2: method stubs.

static base::subtle::AtomicWord g_InterceptedRequestData_getMimeType = 0;
static ScopedJavaLocalRef<jstring>
    Java_InterceptedRequestData_getMimeType(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_InterceptedRequestData_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_InterceptedRequestData_clazz,
      "getMimeType",

"("
")"
"Ljava/lang/String;",
      &g_InterceptedRequestData_getMimeType);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_InterceptedRequestData_getCharset = 0;
static ScopedJavaLocalRef<jstring>
    Java_InterceptedRequestData_getCharset(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_InterceptedRequestData_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_InterceptedRequestData_clazz,
      "getCharset",

"("
")"
"Ljava/lang/String;",
      &g_InterceptedRequestData_getCharset);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_InterceptedRequestData_getData = 0;
static ScopedJavaLocalRef<jobject> Java_InterceptedRequestData_getData(JNIEnv*
    env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_InterceptedRequestData_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_InterceptedRequestData_clazz,
      "getData",

"("
")"
"Ljava/io/InputStream;",
      &g_InterceptedRequestData_getData);

  jobject ret =
    env->CallObjectMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_InterceptedRequestData_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kInterceptedRequestDataClassPath).obj()));
  return true;
}
}  // namespace android_webview

#endif  // org_chromium_android_webview_InterceptedRequestData_JNI
