// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwPicture

#ifndef org_chromium_android_webview_AwPicture_JNI
#define org_chromium_android_webview_AwPicture_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kAwPictureClassPath[] =
    "org/chromium/android_webview/AwPicture";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_AwPicture_clazz = NULL;
}  // namespace

namespace android_webview {

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jlong nativeAwPicture) {
  DCHECK(nativeAwPicture) << "Destroy";
  AwPicture* native = reinterpret_cast<AwPicture*>(nativeAwPicture);
  return native->Destroy(env, obj);
}

static jint GetWidth(JNIEnv* env, jobject obj,
    jlong nativeAwPicture) {
  DCHECK(nativeAwPicture) << "GetWidth";
  AwPicture* native = reinterpret_cast<AwPicture*>(nativeAwPicture);
  return native->GetWidth(env, obj);
}

static jint GetHeight(JNIEnv* env, jobject obj,
    jlong nativeAwPicture) {
  DCHECK(nativeAwPicture) << "GetHeight";
  AwPicture* native = reinterpret_cast<AwPicture*>(nativeAwPicture);
  return native->GetHeight(env, obj);
}

static void Draw(JNIEnv* env, jobject obj,
    jlong nativeAwPicture,
    jobject canvas,
    jint left,
    jint top,
    jint right,
    jint bottom) {
  DCHECK(nativeAwPicture) << "Draw";
  AwPicture* native = reinterpret_cast<AwPicture*>(nativeAwPicture);
  return native->Draw(env, obj, canvas, left, top, right, bottom);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_AwPicture_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kAwPictureClassPath).obj()));
  static const JNINativeMethod kMethodsAwPicture[] = {
    { "nativeDestroy",
"("
"J"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeGetWidth",
"("
"J"
")"
"I", reinterpret_cast<void*>(GetWidth) },
    { "nativeGetHeight",
"("
"J"
")"
"I", reinterpret_cast<void*>(GetHeight) },
    { "nativeDraw",
"("
"J"
"Landroid/graphics/Canvas;"
"I"
"I"
"I"
"I"
")"
"V", reinterpret_cast<void*>(Draw) },
  };
  const int kMethodsAwPictureSize = arraysize(kMethodsAwPicture);

  if (env->RegisterNatives(g_AwPicture_clazz,
                           kMethodsAwPicture,
                           kMethodsAwPictureSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace android_webview

#endif  // org_chromium_android_webview_AwPicture_JNI
