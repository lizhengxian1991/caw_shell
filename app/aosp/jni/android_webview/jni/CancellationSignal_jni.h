// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     android/os/CancellationSignal

#ifndef android_os_CancellationSignal_JNI
#define android_os_CancellationSignal_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kCancellationSignalClassPath[] = "android/os/CancellationSignal";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_CancellationSignal_clazz = NULL;
}  // namespace

namespace JNI_CancellationSignal {

// Step 2: method stubs.

static base::subtle::AtomicWord g_CancellationSignal_isCanceled = 0;
static jboolean Java_CancellationSignal_isCanceled(JNIEnv* env, jobject obj)
    __attribute__ ((unused));
static jboolean Java_CancellationSignal_isCanceled(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_CancellationSignal_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_CancellationSignal_clazz,
      "isCanceled",
      "()Z",
      &g_CancellationSignal_isCanceled);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_CancellationSignal_throwIfCanceled = 0;
static void Java_CancellationSignal_throwIfCanceled(JNIEnv* env, jobject obj)
    __attribute__ ((unused));
static void Java_CancellationSignal_throwIfCanceled(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_CancellationSignal_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_CancellationSignal_clazz,
      "throwIfCanceled",
      "()V",
      &g_CancellationSignal_throwIfCanceled);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_CancellationSignal_cancel = 0;
static void Java_CancellationSignal_cancel(JNIEnv* env, jobject obj)
    __attribute__ ((unused));
static void Java_CancellationSignal_cancel(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_CancellationSignal_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_CancellationSignal_clazz,
      "cancel",
      "()V",
      &g_CancellationSignal_cancel);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_CancellationSignal_setOnCancelListener = 0;
static void Java_CancellationSignal_setOnCancelListener(JNIEnv* env, jobject
    obj, jobject p0) __attribute__ ((unused));
static void Java_CancellationSignal_setOnCancelListener(JNIEnv* env, jobject
    obj, jobject p0) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_CancellationSignal_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_CancellationSignal_clazz,
      "setOnCancelListener",
      "(Landroid/os/CancellationSignal$OnCancelListener;)V",
      &g_CancellationSignal_setOnCancelListener);

  env->CallVoidMethod(obj,
      method_id, p0);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_CancellationSignal_Constructor = 0;
static ScopedJavaLocalRef<jobject> Java_CancellationSignal_Constructor(JNIEnv*
    env) __attribute__ ((unused));
static ScopedJavaLocalRef<jobject> Java_CancellationSignal_Constructor(JNIEnv*
    env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_CancellationSignal_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_CancellationSignal_clazz,
      "<init>",
      "()V",
      &g_CancellationSignal_Constructor);

  jobject ret =
    env->NewObject(g_CancellationSignal_clazz,
      method_id);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_CancellationSignal_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kCancellationSignalClassPath).obj()));
  return true;
}
}  // namespace JNI_CancellationSignal

#endif  // android_os_CancellationSignal_JNI
