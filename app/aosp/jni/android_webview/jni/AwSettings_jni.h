// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwSettings

#ifndef org_chromium_android_webview_AwSettings_JNI
#define org_chromium_android_webview_AwSettings_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kAwSettingsClassPath[] =
    "org/chromium/android_webview/AwSettings";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_AwSettings_clazz = NULL;
}  // namespace

namespace android_webview {

static jlong Init(JNIEnv* env, jobject obj,
    jlong webContentsPtr);

static jstring GetDefaultUserAgent(JNIEnv* env, jclass clazz);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jlong nativeAwSettings) {
  DCHECK(nativeAwSettings) << "Destroy";
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  return native->Destroy(env, obj);
}

static void PopulateWebPreferencesLocked(JNIEnv* env, jobject obj,
    jlong nativeAwSettings,
    jlong webPrefsPtr) {
  DCHECK(nativeAwSettings) << "PopulateWebPreferencesLocked";
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  return native->PopulateWebPreferencesLocked(env, obj, webPrefsPtr);
}

static void ResetScrollAndScaleState(JNIEnv* env, jobject obj,
    jlong nativeAwSettings) {
  DCHECK(nativeAwSettings) << "ResetScrollAndScaleState";
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  return native->ResetScrollAndScaleState(env, obj);
}

static void UpdateEverythingLocked(JNIEnv* env, jobject obj,
    jlong nativeAwSettings) {
  DCHECK(nativeAwSettings) << "UpdateEverythingLocked";
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  return native->UpdateEverythingLocked(env, obj);
}

static void UpdateInitialPageScaleLocked(JNIEnv* env, jobject obj,
    jlong nativeAwSettings) {
  DCHECK(nativeAwSettings) << "UpdateInitialPageScaleLocked";
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  return native->UpdateInitialPageScaleLocked(env, obj);
}

static void UpdateUserAgentLocked(JNIEnv* env, jobject obj,
    jlong nativeAwSettings) {
  DCHECK(nativeAwSettings) << "UpdateUserAgentLocked";
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  return native->UpdateUserAgentLocked(env, obj);
}

static void UpdateWebkitPreferencesLocked(JNIEnv* env, jobject obj,
    jlong nativeAwSettings) {
  DCHECK(nativeAwSettings) << "UpdateWebkitPreferencesLocked";
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  return native->UpdateWebkitPreferencesLocked(env, obj);
}

static void UpdateFormDataPreferencesLocked(JNIEnv* env, jobject obj,
    jlong nativeAwSettings) {
  DCHECK(nativeAwSettings) << "UpdateFormDataPreferencesLocked";
  AwSettings* native = reinterpret_cast<AwSettings*>(nativeAwSettings);
  return native->UpdateFormDataPreferencesLocked(env, obj);
}

static base::subtle::AtomicWord g_AwSettings_nativeAwSettingsGone = 0;
static void Java_AwSettings_nativeAwSettingsGone(JNIEnv* env, jobject obj, jlong
    nativeAwSettings) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "nativeAwSettingsGone",

"("
"J"
")"
"V",
      &g_AwSettings_nativeAwSettingsGone);

  env->CallVoidMethod(obj,
      method_id, nativeAwSettings);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_AwSettings_getDIPScaleLocked = 0;
static jdouble Java_AwSettings_getDIPScaleLocked(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getDIPScaleLocked",

"("
")"
"D",
      &g_AwSettings_getDIPScaleLocked);

  jdouble ret =
    env->CallDoubleMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getInitialPageScalePercentLocked =
    0;
static jfloat Java_AwSettings_getInitialPageScalePercentLocked(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getInitialPageScalePercentLocked",

"("
")"
"F",
      &g_AwSettings_getInitialPageScalePercentLocked);

  jfloat ret =
    env->CallFloatMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getSpatialNavigationLocked = 0;
static jboolean Java_AwSettings_getSpatialNavigationLocked(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getSpatialNavigationLocked",

"("
")"
"Z",
      &g_AwSettings_getSpatialNavigationLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_AwSettings_getEnableSupportedHardwareAcceleratedFeaturesLocked = 0;
static jboolean
    Java_AwSettings_getEnableSupportedHardwareAcceleratedFeaturesLocked(JNIEnv*
    env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getEnableSupportedHardwareAcceleratedFeaturesLocked",

"("
")"
"Z",
      &g_AwSettings_getEnableSupportedHardwareAcceleratedFeaturesLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getSaveFormDataLocked = 0;
static jboolean Java_AwSettings_getSaveFormDataLocked(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getSaveFormDataLocked",

"("
")"
"Z",
      &g_AwSettings_getSaveFormDataLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getUserAgentLocked = 0;
static ScopedJavaLocalRef<jstring> Java_AwSettings_getUserAgentLocked(JNIEnv*
    env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getUserAgentLocked",

"("
")"
"Ljava/lang/String;",
      &g_AwSettings_getUserAgentLocked);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwSettings_getLoadWithOverviewModeLocked = 0;
static jboolean Java_AwSettings_getLoadWithOverviewModeLocked(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getLoadWithOverviewModeLocked",

"("
")"
"Z",
      &g_AwSettings_getLoadWithOverviewModeLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getTextSizePercentLocked = 0;
static jint Java_AwSettings_getTextSizePercentLocked(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getTextSizePercentLocked",

"("
")"
"I",
      &g_AwSettings_getTextSizePercentLocked);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getStandardFontFamilyLocked = 0;
static ScopedJavaLocalRef<jstring>
    Java_AwSettings_getStandardFontFamilyLocked(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getStandardFontFamilyLocked",

"("
")"
"Ljava/lang/String;",
      &g_AwSettings_getStandardFontFamilyLocked);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwSettings_getFixedFontFamilyLocked = 0;
static ScopedJavaLocalRef<jstring>
    Java_AwSettings_getFixedFontFamilyLocked(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getFixedFontFamilyLocked",

"("
")"
"Ljava/lang/String;",
      &g_AwSettings_getFixedFontFamilyLocked);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwSettings_getSansSerifFontFamilyLocked = 0;
static ScopedJavaLocalRef<jstring>
    Java_AwSettings_getSansSerifFontFamilyLocked(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getSansSerifFontFamilyLocked",

"("
")"
"Ljava/lang/String;",
      &g_AwSettings_getSansSerifFontFamilyLocked);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwSettings_getSerifFontFamilyLocked = 0;
static ScopedJavaLocalRef<jstring>
    Java_AwSettings_getSerifFontFamilyLocked(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getSerifFontFamilyLocked",

"("
")"
"Ljava/lang/String;",
      &g_AwSettings_getSerifFontFamilyLocked);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwSettings_getCursiveFontFamilyLocked = 0;
static ScopedJavaLocalRef<jstring>
    Java_AwSettings_getCursiveFontFamilyLocked(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getCursiveFontFamilyLocked",

"("
")"
"Ljava/lang/String;",
      &g_AwSettings_getCursiveFontFamilyLocked);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwSettings_getFantasyFontFamilyLocked = 0;
static ScopedJavaLocalRef<jstring>
    Java_AwSettings_getFantasyFontFamilyLocked(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getFantasyFontFamilyLocked",

"("
")"
"Ljava/lang/String;",
      &g_AwSettings_getFantasyFontFamilyLocked);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwSettings_getMinimumFontSizeLocked = 0;
static jint Java_AwSettings_getMinimumFontSizeLocked(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getMinimumFontSizeLocked",

"("
")"
"I",
      &g_AwSettings_getMinimumFontSizeLocked);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getMinimumLogicalFontSizeLocked =
    0;
static jint Java_AwSettings_getMinimumLogicalFontSizeLocked(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getMinimumLogicalFontSizeLocked",

"("
")"
"I",
      &g_AwSettings_getMinimumLogicalFontSizeLocked);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getDefaultFontSizeLocked = 0;
static jint Java_AwSettings_getDefaultFontSizeLocked(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getDefaultFontSizeLocked",

"("
")"
"I",
      &g_AwSettings_getDefaultFontSizeLocked);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getDefaultFixedFontSizeLocked = 0;
static jint Java_AwSettings_getDefaultFixedFontSizeLocked(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getDefaultFixedFontSizeLocked",

"("
")"
"I",
      &g_AwSettings_getDefaultFixedFontSizeLocked);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getLoadsImagesAutomaticallyLocked =
    0;
static jboolean Java_AwSettings_getLoadsImagesAutomaticallyLocked(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getLoadsImagesAutomaticallyLocked",

"("
")"
"Z",
      &g_AwSettings_getLoadsImagesAutomaticallyLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getImagesEnabledLocked = 0;
static jboolean Java_AwSettings_getImagesEnabledLocked(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getImagesEnabledLocked",

"("
")"
"Z",
      &g_AwSettings_getImagesEnabledLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getJavaScriptEnabledLocked = 0;
static jboolean Java_AwSettings_getJavaScriptEnabledLocked(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getJavaScriptEnabledLocked",

"("
")"
"Z",
      &g_AwSettings_getJavaScriptEnabledLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_AwSettings_getAllowUniversalAccessFromFileURLsLocked = 0;
static jboolean
    Java_AwSettings_getAllowUniversalAccessFromFileURLsLocked(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getAllowUniversalAccessFromFileURLsLocked",

"("
")"
"Z",
      &g_AwSettings_getAllowUniversalAccessFromFileURLsLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_AwSettings_getAllowFileAccessFromFileURLsLocked = 0;
static jboolean Java_AwSettings_getAllowFileAccessFromFileURLsLocked(JNIEnv*
    env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getAllowFileAccessFromFileURLsLocked",

"("
")"
"Z",
      &g_AwSettings_getAllowFileAccessFromFileURLsLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getPluginsDisabledLocked = 0;
static jboolean Java_AwSettings_getPluginsDisabledLocked(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getPluginsDisabledLocked",

"("
")"
"Z",
      &g_AwSettings_getPluginsDisabledLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_AwSettings_getJavaScriptCanOpenWindowsAutomaticallyLocked = 0;
static jboolean
    Java_AwSettings_getJavaScriptCanOpenWindowsAutomaticallyLocked(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getJavaScriptCanOpenWindowsAutomaticallyLocked",

"("
")"
"Z",
      &g_AwSettings_getJavaScriptCanOpenWindowsAutomaticallyLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getTextAutosizingEnabledLocked = 0;
static jboolean Java_AwSettings_getTextAutosizingEnabledLocked(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getTextAutosizingEnabledLocked",

"("
")"
"Z",
      &g_AwSettings_getTextAutosizingEnabledLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getSupportMultipleWindowsLocked =
    0;
static jboolean Java_AwSettings_getSupportMultipleWindowsLocked(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getSupportMultipleWindowsLocked",

"("
")"
"Z",
      &g_AwSettings_getSupportMultipleWindowsLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getSupportLegacyQuirksLocked = 0;
static jboolean Java_AwSettings_getSupportLegacyQuirksLocked(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getSupportLegacyQuirksLocked",

"("
")"
"Z",
      &g_AwSettings_getSupportLegacyQuirksLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getUseWideViewportLocked = 0;
static jboolean Java_AwSettings_getUseWideViewportLocked(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getUseWideViewportLocked",

"("
")"
"Z",
      &g_AwSettings_getUseWideViewportLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getPasswordEchoEnabledLocked = 0;
static jboolean Java_AwSettings_getPasswordEchoEnabledLocked(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getPasswordEchoEnabledLocked",

"("
")"
"Z",
      &g_AwSettings_getPasswordEchoEnabledLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getAppCacheEnabledLocked = 0;
static jboolean Java_AwSettings_getAppCacheEnabledLocked(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getAppCacheEnabledLocked",

"("
")"
"Z",
      &g_AwSettings_getAppCacheEnabledLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getDomStorageEnabledLocked = 0;
static jboolean Java_AwSettings_getDomStorageEnabledLocked(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getDomStorageEnabledLocked",

"("
")"
"Z",
      &g_AwSettings_getDomStorageEnabledLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getDatabaseEnabledLocked = 0;
static jboolean Java_AwSettings_getDatabaseEnabledLocked(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getDatabaseEnabledLocked",

"("
")"
"Z",
      &g_AwSettings_getDatabaseEnabledLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getDefaultTextEncodingLocked = 0;
static ScopedJavaLocalRef<jstring>
    Java_AwSettings_getDefaultTextEncodingLocked(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getDefaultTextEncodingLocked",

"("
")"
"Ljava/lang/String;",
      &g_AwSettings_getDefaultTextEncodingLocked);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord
    g_AwSettings_getMediaPlaybackRequiresUserGestureLocked = 0;
static jboolean
    Java_AwSettings_getMediaPlaybackRequiresUserGestureLocked(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getMediaPlaybackRequiresUserGestureLocked",

"("
")"
"Z",
      &g_AwSettings_getMediaPlaybackRequiresUserGestureLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_getDefaultVideoPosterURLLocked = 0;
static ScopedJavaLocalRef<jstring>
    Java_AwSettings_getDefaultVideoPosterURLLocked(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "getDefaultVideoPosterURLLocked",

"("
")"
"Ljava/lang/String;",
      &g_AwSettings_getDefaultVideoPosterURLLocked);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AwSettings_supportsDoubleTapZoomLocked = 0;
static jboolean Java_AwSettings_supportsDoubleTapZoomLocked(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "supportsDoubleTapZoomLocked",

"("
")"
"Z",
      &g_AwSettings_supportsDoubleTapZoomLocked);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AwSettings_updateEverything = 0;
static void Java_AwSettings_updateEverything(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "updateEverything",

"("
")"
"V",
      &g_AwSettings_updateEverything);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_AwSettings_populateWebPreferences = 0;
static void Java_AwSettings_populateWebPreferences(JNIEnv* env, jobject obj,
    jlong webPrefsPtr) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwSettings_clazz,
      "populateWebPreferences",

"("
"J"
")"
"V",
      &g_AwSettings_populateWebPreferences);

  env->CallVoidMethod(obj,
      method_id, webPrefsPtr);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_AwSettings_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kAwSettingsClassPath).obj()));
  static const JNINativeMethod kMethodsAwSettings[] = {
    { "nativeInit",
"("
"J"
")"
"J", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"J"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativePopulateWebPreferencesLocked",
"("
"J"
"J"
")"
"V", reinterpret_cast<void*>(PopulateWebPreferencesLocked) },
    { "nativeResetScrollAndScaleState",
"("
"J"
")"
"V", reinterpret_cast<void*>(ResetScrollAndScaleState) },
    { "nativeUpdateEverythingLocked",
"("
"J"
")"
"V", reinterpret_cast<void*>(UpdateEverythingLocked) },
    { "nativeUpdateInitialPageScaleLocked",
"("
"J"
")"
"V", reinterpret_cast<void*>(UpdateInitialPageScaleLocked) },
    { "nativeUpdateUserAgentLocked",
"("
"J"
")"
"V", reinterpret_cast<void*>(UpdateUserAgentLocked) },
    { "nativeUpdateWebkitPreferencesLocked",
"("
"J"
")"
"V", reinterpret_cast<void*>(UpdateWebkitPreferencesLocked) },
    { "nativeGetDefaultUserAgent",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetDefaultUserAgent) },
    { "nativeUpdateFormDataPreferencesLocked",
"("
"J"
")"
"V", reinterpret_cast<void*>(UpdateFormDataPreferencesLocked) },
  };
  const int kMethodsAwSettingsSize = arraysize(kMethodsAwSettings);

  if (env->RegisterNatives(g_AwSettings_clazz,
                           kMethodsAwSettings,
                           kMethodsAwSettingsSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace android_webview

#endif  // org_chromium_android_webview_AwSettings_JNI
