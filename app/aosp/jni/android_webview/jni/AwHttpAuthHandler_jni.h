// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwHttpAuthHandler

#ifndef org_chromium_android_webview_AwHttpAuthHandler_JNI
#define org_chromium_android_webview_AwHttpAuthHandler_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kAwHttpAuthHandlerClassPath[] =
    "org/chromium/android_webview/AwHttpAuthHandler";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_AwHttpAuthHandler_clazz = NULL;
}  // namespace

namespace android_webview {

// Step 2: method stubs.
static void Proceed(JNIEnv* env, jobject obj,
    jlong nativeAwHttpAuthHandler,
    jstring username,
    jstring password) {
  DCHECK(nativeAwHttpAuthHandler) << "Proceed";
  AwHttpAuthHandler* native =
      reinterpret_cast<AwHttpAuthHandler*>(nativeAwHttpAuthHandler);
  return native->Proceed(env, obj, username, password);
}

static void Cancel(JNIEnv* env, jobject obj,
    jlong nativeAwHttpAuthHandler) {
  DCHECK(nativeAwHttpAuthHandler) << "Cancel";
  AwHttpAuthHandler* native =
      reinterpret_cast<AwHttpAuthHandler*>(nativeAwHttpAuthHandler);
  return native->Cancel(env, obj);
}

static base::subtle::AtomicWord g_AwHttpAuthHandler_create = 0;
static ScopedJavaLocalRef<jobject> Java_AwHttpAuthHandler_create(JNIEnv* env,
    jlong nativeAwAuthHandler,
    jboolean firstAttempt) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwHttpAuthHandler_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AwHttpAuthHandler_clazz,
      "create",

"("
"J"
"Z"
")"
"Lorg/chromium/android_webview/AwHttpAuthHandler;",
      &g_AwHttpAuthHandler_create);

  jobject ret =
    env->CallStaticObjectMethod(g_AwHttpAuthHandler_clazz,
      method_id, nativeAwAuthHandler, firstAttempt);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_AwHttpAuthHandler_handlerDestroyed = 0;
static void Java_AwHttpAuthHandler_handlerDestroyed(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AwHttpAuthHandler_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AwHttpAuthHandler_clazz,
      "handlerDestroyed",

"("
")"
"V",
      &g_AwHttpAuthHandler_handlerDestroyed);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_AwHttpAuthHandler_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kAwHttpAuthHandlerClassPath).obj()));
  static const JNINativeMethod kMethodsAwHttpAuthHandler[] = {
    { "nativeProceed",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(Proceed) },
    { "nativeCancel",
"("
"J"
")"
"V", reinterpret_cast<void*>(Cancel) },
  };
  const int kMethodsAwHttpAuthHandlerSize =
      arraysize(kMethodsAwHttpAuthHandler);

  if (env->RegisterNatives(g_AwHttpAuthHandler_clazz,
                           kMethodsAwHttpAuthHandler,
                           kMethodsAwHttpAuthHandlerSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace android_webview

#endif  // org_chromium_android_webview_AwHttpAuthHandler_JNI
