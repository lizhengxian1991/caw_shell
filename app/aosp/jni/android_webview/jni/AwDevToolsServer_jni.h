// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/android_webview/AwDevToolsServer

#ifndef org_chromium_android_webview_AwDevToolsServer_JNI
#define org_chromium_android_webview_AwDevToolsServer_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kAwDevToolsServerClassPath[] =
    "org/chromium/android_webview/AwDevToolsServer";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_AwDevToolsServer_clazz = NULL;
}  // namespace

namespace android_webview {

static jint InitRemoteDebugging(JNIEnv* env, jobject obj);

static void DestroyRemoteDebugging(JNIEnv* env, jobject obj,
    jint devToolsServer);

static void SetRemoteDebuggingEnabled(JNIEnv* env, jobject obj,
    jint devToolsServer,
    jboolean enabled);

// Step 2: method stubs.

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_AwDevToolsServer_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kAwDevToolsServerClassPath).obj()));
  static const JNINativeMethod kMethodsAwDevToolsServer[] = {
    { "nativeInitRemoteDebugging",
"("
")"
"I", reinterpret_cast<void*>(InitRemoteDebugging) },
    { "nativeDestroyRemoteDebugging",
"("
"I"
")"
"V", reinterpret_cast<void*>(DestroyRemoteDebugging) },
    { "nativeSetRemoteDebuggingEnabled",
"("
"I"
"Z"
")"
"V", reinterpret_cast<void*>(SetRemoteDebuggingEnabled) },
  };
  const int kMethodsAwDevToolsServerSize = arraysize(kMethodsAwDevToolsServer);

  if (env->RegisterNatives(g_AwDevToolsServer_clazz,
                           kMethodsAwDevToolsServer,
                           kMethodsAwDevToolsServerSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace android_webview

#endif  // org_chromium_android_webview_AwDevToolsServer_JNI
