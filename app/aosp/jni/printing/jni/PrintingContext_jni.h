// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/printing/PrintingContext

#ifndef org_chromium_printing_PrintingContext_JNI
#define org_chromium_printing_PrintingContext_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kPrintingContextClassPath[] =
    "org/chromium/printing/PrintingContext";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_PrintingContext_clazz = NULL;
}  // namespace

namespace printing {

// Step 2: method stubs.
static void AskUserForSettingsReply(JNIEnv* env, jobject obj,
    jlong nativePrintingContextAndroid,
    jboolean success) {
  DCHECK(nativePrintingContextAndroid) << "AskUserForSettingsReply";
  PrintingContextAndroid* native =
      reinterpret_cast<PrintingContextAndroid*>(nativePrintingContextAndroid);
  return native->AskUserForSettingsReply(env, obj, success);
}

static base::subtle::AtomicWord g_PrintingContext_create = 0;
static ScopedJavaLocalRef<jobject> Java_PrintingContext_create(JNIEnv* env, jint
    nativeObjectPointer) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_PrintingContext_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_PrintingContext_clazz,
      "create",

"("
"I"
")"
"Lorg/chromium/printing/PrintingContext;",
      &g_PrintingContext_create);

  jobject ret =
    env->CallStaticObjectMethod(g_PrintingContext_clazz,
      method_id, nativeObjectPointer);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_PrintingContext_getFileDescriptor = 0;
static jint Java_PrintingContext_getFileDescriptor(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_PrintingContext_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_PrintingContext_clazz,
      "getFileDescriptor",

"("
")"
"I",
      &g_PrintingContext_getFileDescriptor);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_PrintingContext_getDpi = 0;
static jint Java_PrintingContext_getDpi(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_PrintingContext_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_PrintingContext_clazz,
      "getDpi",

"("
")"
"I",
      &g_PrintingContext_getDpi);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_PrintingContext_getWidth = 0;
static jint Java_PrintingContext_getWidth(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_PrintingContext_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_PrintingContext_clazz,
      "getWidth",

"("
")"
"I",
      &g_PrintingContext_getWidth);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_PrintingContext_getHeight = 0;
static jint Java_PrintingContext_getHeight(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_PrintingContext_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_PrintingContext_clazz,
      "getHeight",

"("
")"
"I",
      &g_PrintingContext_getHeight);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_PrintingContext_pdfWritingDone = 0;
static void Java_PrintingContext_pdfWritingDone(JNIEnv* env, jint fd,
    jboolean success) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_PrintingContext_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_PrintingContext_clazz,
      "pdfWritingDone",

"("
"I"
"Z"
")"
"V",
      &g_PrintingContext_pdfWritingDone);

  env->CallStaticVoidMethod(g_PrintingContext_clazz,
      method_id, fd, success);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_PrintingContext_getPages = 0;
static ScopedJavaLocalRef<jintArray> Java_PrintingContext_getPages(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_PrintingContext_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_PrintingContext_clazz,
      "getPages",

"("
")"
"[I",
      &g_PrintingContext_getPages);

  jintArray ret =
    static_cast<jintArray>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jintArray>(env, ret);
}

static base::subtle::AtomicWord g_PrintingContext_pageCountEstimationDone = 0;
static void Java_PrintingContext_pageCountEstimationDone(JNIEnv* env, jobject
    obj, jint maxPages) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_PrintingContext_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_PrintingContext_clazz,
      "pageCountEstimationDone",

"("
"I"
")"
"V",
      &g_PrintingContext_pageCountEstimationDone);

  env->CallVoidMethod(obj,
      method_id, maxPages);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_PrintingContext_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kPrintingContextClassPath).obj()));
  static const JNINativeMethod kMethodsPrintingContext[] = {
    { "nativeAskUserForSettingsReply",
"("
"J"
"Z"
")"
"V", reinterpret_cast<void*>(AskUserForSettingsReply) },
  };
  const int kMethodsPrintingContextSize = arraysize(kMethodsPrintingContext);

  if (env->RegisterNatives(g_PrintingContext_clazz,
                           kMethodsPrintingContext,
                           kMethodsPrintingContextSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace printing

#endif  // org_chromium_printing_PrintingContext_JNI
