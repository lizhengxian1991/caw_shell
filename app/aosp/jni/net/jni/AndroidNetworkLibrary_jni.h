// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/net/AndroidNetworkLibrary

#ifndef org_chromium_net_AndroidNetworkLibrary_JNI
#define org_chromium_net_AndroidNetworkLibrary_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kAndroidNetworkLibraryClassPath[] =
    "org/chromium/net/AndroidNetworkLibrary";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_AndroidNetworkLibrary_clazz = NULL;
}  // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord g_AndroidNetworkLibrary_storeKeyPair = 0;
static jboolean Java_AndroidNetworkLibrary_storeKeyPair(JNIEnv* env, jobject
    context,
    jbyteArray publicKey,
    jbyteArray privateKey) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidNetworkLibrary_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidNetworkLibrary_clazz,
      "storeKeyPair",

"("
"Landroid/content/Context;"
"[B"
"[B"
")"
"Z",
      &g_AndroidNetworkLibrary_storeKeyPair);

  jboolean ret =
    env->CallStaticBooleanMethod(g_AndroidNetworkLibrary_clazz,
      method_id, context, publicKey, privateKey);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AndroidNetworkLibrary_storeCertificate = 0;
static jboolean Java_AndroidNetworkLibrary_storeCertificate(JNIEnv* env, jobject
    context,
    jint certType,
    jbyteArray data) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidNetworkLibrary_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidNetworkLibrary_clazz,
      "storeCertificate",

"("
"Landroid/content/Context;"
"I"
"[B"
")"
"Z",
      &g_AndroidNetworkLibrary_storeCertificate);

  jboolean ret =
    env->CallStaticBooleanMethod(g_AndroidNetworkLibrary_clazz,
      method_id, context, certType, data);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AndroidNetworkLibrary_getMimeTypeFromExtension
    = 0;
static ScopedJavaLocalRef<jstring>
    Java_AndroidNetworkLibrary_getMimeTypeFromExtension(JNIEnv* env, jstring
    extension) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidNetworkLibrary_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidNetworkLibrary_clazz,
      "getMimeTypeFromExtension",

"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
      &g_AndroidNetworkLibrary_getMimeTypeFromExtension);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(g_AndroidNetworkLibrary_clazz,
      method_id, extension));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord
    g_AndroidNetworkLibrary_haveOnlyLoopbackAddresses = 0;
static jboolean Java_AndroidNetworkLibrary_haveOnlyLoopbackAddresses(JNIEnv*
    env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidNetworkLibrary_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidNetworkLibrary_clazz,
      "haveOnlyLoopbackAddresses",

"("
")"
"Z",
      &g_AndroidNetworkLibrary_haveOnlyLoopbackAddresses);

  jboolean ret =
    env->CallStaticBooleanMethod(g_AndroidNetworkLibrary_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AndroidNetworkLibrary_getNetworkList = 0;
static ScopedJavaLocalRef<jstring>
    Java_AndroidNetworkLibrary_getNetworkList(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidNetworkLibrary_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidNetworkLibrary_clazz,
      "getNetworkList",

"("
")"
"Ljava/lang/String;",
      &g_AndroidNetworkLibrary_getNetworkList);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(g_AndroidNetworkLibrary_clazz,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AndroidNetworkLibrary_verifyServerCertificates
    = 0;
static jint Java_AndroidNetworkLibrary_verifyServerCertificates(JNIEnv* env,
    jobjectArray certChain,
    jstring authType) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidNetworkLibrary_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidNetworkLibrary_clazz,
      "verifyServerCertificates",

"("
"[[B"
"Ljava/lang/String;"
")"
"I",
      &g_AndroidNetworkLibrary_verifyServerCertificates);

  jint ret =
    env->CallStaticIntMethod(g_AndroidNetworkLibrary_clazz,
      method_id, certChain, authType);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AndroidNetworkLibrary_addTestRootCertificate =
    0;
static void Java_AndroidNetworkLibrary_addTestRootCertificate(JNIEnv* env,
    jbyteArray rootCert) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidNetworkLibrary_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidNetworkLibrary_clazz,
      "addTestRootCertificate",

"("
"[B"
")"
"V",
      &g_AndroidNetworkLibrary_addTestRootCertificate);

  env->CallStaticVoidMethod(g_AndroidNetworkLibrary_clazz,
      method_id, rootCert);

}

static base::subtle::AtomicWord
    g_AndroidNetworkLibrary_clearTestRootCertificates = 0;
static void Java_AndroidNetworkLibrary_clearTestRootCertificates(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidNetworkLibrary_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidNetworkLibrary_clazz,
      "clearTestRootCertificates",

"("
")"
"V",
      &g_AndroidNetworkLibrary_clearTestRootCertificates);

  env->CallStaticVoidMethod(g_AndroidNetworkLibrary_clazz,
      method_id);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_AndroidNetworkLibrary_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kAndroidNetworkLibraryClassPath).obj()));
  return true;
}

#endif  // org_chromium_net_AndroidNetworkLibrary_JNI
