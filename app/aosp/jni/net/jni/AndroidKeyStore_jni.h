// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/net/AndroidKeyStore

#ifndef org_chromium_net_AndroidKeyStore_JNI
#define org_chromium_net_AndroidKeyStore_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kAndroidKeyStoreClassPath[] =
    "org/chromium/net/AndroidKeyStore";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_AndroidKeyStore_clazz = NULL;
}  // namespace

namespace net {
namespace android {

// Step 2: method stubs.

static base::subtle::AtomicWord g_AndroidKeyStore_getRSAKeyModulus = 0;
static ScopedJavaLocalRef<jbyteArray>
    Java_AndroidKeyStore_getRSAKeyModulus(JNIEnv* env, jobject key) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidKeyStore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidKeyStore_clazz,
      "getRSAKeyModulus",

"("
"Ljava/security/PrivateKey;"
")"
"[B",
      &g_AndroidKeyStore_getRSAKeyModulus);

  jbyteArray ret =
    static_cast<jbyteArray>(env->CallStaticObjectMethod(g_AndroidKeyStore_clazz,
      method_id, key));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jbyteArray>(env, ret);
}

static base::subtle::AtomicWord g_AndroidKeyStore_getDSAKeyParamQ = 0;
static ScopedJavaLocalRef<jbyteArray>
    Java_AndroidKeyStore_getDSAKeyParamQ(JNIEnv* env, jobject key) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidKeyStore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidKeyStore_clazz,
      "getDSAKeyParamQ",

"("
"Ljava/security/PrivateKey;"
")"
"[B",
      &g_AndroidKeyStore_getDSAKeyParamQ);

  jbyteArray ret =
    static_cast<jbyteArray>(env->CallStaticObjectMethod(g_AndroidKeyStore_clazz,
      method_id, key));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jbyteArray>(env, ret);
}

static base::subtle::AtomicWord g_AndroidKeyStore_getECKeyOrder = 0;
static ScopedJavaLocalRef<jbyteArray> Java_AndroidKeyStore_getECKeyOrder(JNIEnv*
    env, jobject key) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidKeyStore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidKeyStore_clazz,
      "getECKeyOrder",

"("
"Ljava/security/PrivateKey;"
")"
"[B",
      &g_AndroidKeyStore_getECKeyOrder);

  jbyteArray ret =
    static_cast<jbyteArray>(env->CallStaticObjectMethod(g_AndroidKeyStore_clazz,
      method_id, key));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jbyteArray>(env, ret);
}

static base::subtle::AtomicWord g_AndroidKeyStore_getPrivateKeyEncodedBytes = 0;
static ScopedJavaLocalRef<jbyteArray>
    Java_AndroidKeyStore_getPrivateKeyEncodedBytes(JNIEnv* env, jobject key) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidKeyStore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidKeyStore_clazz,
      "getPrivateKeyEncodedBytes",

"("
"Ljava/security/PrivateKey;"
")"
"[B",
      &g_AndroidKeyStore_getPrivateKeyEncodedBytes);

  jbyteArray ret =
    static_cast<jbyteArray>(env->CallStaticObjectMethod(g_AndroidKeyStore_clazz,
      method_id, key));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jbyteArray>(env, ret);
}

static base::subtle::AtomicWord g_AndroidKeyStore_rawSignDigestWithPrivateKey =
    0;
static ScopedJavaLocalRef<jbyteArray>
    Java_AndroidKeyStore_rawSignDigestWithPrivateKey(JNIEnv* env, jobject
    privateKey,
    jbyteArray message) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidKeyStore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidKeyStore_clazz,
      "rawSignDigestWithPrivateKey",

"("
"Ljava/security/PrivateKey;"
"[B"
")"
"[B",
      &g_AndroidKeyStore_rawSignDigestWithPrivateKey);

  jbyteArray ret =
    static_cast<jbyteArray>(env->CallStaticObjectMethod(g_AndroidKeyStore_clazz,
      method_id, privateKey, message));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jbyteArray>(env, ret);
}

static base::subtle::AtomicWord g_AndroidKeyStore_getPrivateKeyType = 0;
static jint Java_AndroidKeyStore_getPrivateKeyType(JNIEnv* env, jobject
    privateKey) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidKeyStore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidKeyStore_clazz,
      "getPrivateKeyType",

"("
"Ljava/security/PrivateKey;"
")"
"I",
      &g_AndroidKeyStore_getPrivateKeyType);

  jint ret =
    env->CallStaticIntMethod(g_AndroidKeyStore_clazz,
      method_id, privateKey);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AndroidKeyStore_getOpenSSLHandleForPrivateKey
    = 0;
static jint Java_AndroidKeyStore_getOpenSSLHandleForPrivateKey(JNIEnv* env,
    jobject privateKey) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AndroidKeyStore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AndroidKeyStore_clazz,
      "getOpenSSLHandleForPrivateKey",

"("
"Ljava/security/PrivateKey;"
")"
"I",
      &g_AndroidKeyStore_getOpenSSLHandleForPrivateKey);

  jint ret =
    env->CallStaticIntMethod(g_AndroidKeyStore_clazz,
      method_id, privateKey);
  base::android::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_AndroidKeyStore_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kAndroidKeyStoreClassPath).obj()));
  return true;
}
}  // namespace android
}  // namespace net

#endif  // org_chromium_net_AndroidKeyStore_JNI
