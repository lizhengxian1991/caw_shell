// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/ContentViewRenderView

#ifndef org_chromium_content_browser_ContentViewRenderView_JNI
#define org_chromium_content_browser_ContentViewRenderView_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kContentViewRenderViewClassPath[] =
    "org/chromium/content/browser/ContentViewRenderView";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ContentViewRenderView_clazz = NULL;
}  // namespace

namespace content {

static jlong Init(JNIEnv* env, jobject obj,
    jlong rootWindowNativePointer);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jlong nativeContentViewRenderView) {
  DCHECK(nativeContentViewRenderView) << "Destroy";
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  return native->Destroy(env, obj);
}

static void SetCurrentContentView(JNIEnv* env, jobject obj,
    jlong nativeContentViewRenderView,
    jlong nativeContentView) {
  DCHECK(nativeContentViewRenderView) << "SetCurrentContentView";
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  return native->SetCurrentContentView(env, obj, nativeContentView);
}

static void SurfaceCreated(JNIEnv* env, jobject obj,
    jlong nativeContentViewRenderView,
    jobject surface) {
  DCHECK(nativeContentViewRenderView) << "SurfaceCreated";
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  return native->SurfaceCreated(env, obj, surface);
}

static void SurfaceDestroyed(JNIEnv* env, jobject obj,
    jlong nativeContentViewRenderView) {
  DCHECK(nativeContentViewRenderView) << "SurfaceDestroyed";
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  return native->SurfaceDestroyed(env, obj);
}

static void SurfaceSetSize(JNIEnv* env, jobject obj,
    jlong nativeContentViewRenderView,
    jint width,
    jint height) {
  DCHECK(nativeContentViewRenderView) << "SurfaceSetSize";
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  return native->SurfaceSetSize(env, obj, width, height);
}

static jboolean Composite(JNIEnv* env, jobject obj,
    jlong nativeContentViewRenderView) {
  DCHECK(nativeContentViewRenderView) << "Composite";
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  return native->Composite(env, obj);
}

static jboolean CompositeToBitmap(JNIEnv* env, jobject obj,
    jlong nativeContentViewRenderView,
    jobject bitmap) {
  DCHECK(nativeContentViewRenderView) << "CompositeToBitmap";
  ContentViewRenderView* native =
      reinterpret_cast<ContentViewRenderView*>(nativeContentViewRenderView);
  return native->CompositeToBitmap(env, obj, bitmap);
}

static base::subtle::AtomicWord g_ContentViewRenderView_requestRender = 0;
static void Java_ContentViewRenderView_requestRender(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ContentViewRenderView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewRenderView_clazz,
      "requestRender",

"("
")"
"V",
      &g_ContentViewRenderView_requestRender);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewRenderView_onSwapBuffersCompleted =
    0;
static void Java_ContentViewRenderView_onSwapBuffersCompleted(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ContentViewRenderView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewRenderView_clazz,
      "onSwapBuffersCompleted",

"("
")"
"V",
      &g_ContentViewRenderView_onSwapBuffersCompleted);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_ContentViewRenderView_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kContentViewRenderViewClassPath).obj()));
  static const JNINativeMethod kMethodsContentViewRenderView[] = {
    { "nativeInit",
"("
"J"
")"
"J", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"J"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeSetCurrentContentView",
"("
"J"
"J"
")"
"V", reinterpret_cast<void*>(SetCurrentContentView) },
    { "nativeSurfaceCreated",
"("
"J"
"Landroid/view/Surface;"
")"
"V", reinterpret_cast<void*>(SurfaceCreated) },
    { "nativeSurfaceDestroyed",
"("
"J"
")"
"V", reinterpret_cast<void*>(SurfaceDestroyed) },
    { "nativeSurfaceSetSize",
"("
"J"
"I"
"I"
")"
"V", reinterpret_cast<void*>(SurfaceSetSize) },
    { "nativeComposite",
"("
"J"
")"
"Z", reinterpret_cast<void*>(Composite) },
    { "nativeCompositeToBitmap",
"("
"J"
"Landroid/graphics/Bitmap;"
")"
"Z", reinterpret_cast<void*>(CompositeToBitmap) },
  };
  const int kMethodsContentViewRenderViewSize =
      arraysize(kMethodsContentViewRenderView);

  if (env->RegisterNatives(g_ContentViewRenderView_clazz,
                           kMethodsContentViewRenderView,
                           kMethodsContentViewRenderViewSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_chromium_content_browser_ContentViewRenderView_JNI
