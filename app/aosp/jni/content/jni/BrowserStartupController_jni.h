// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/BrowserStartupController

#ifndef org_chromium_content_browser_BrowserStartupController_JNI
#define org_chromium_content_browser_BrowserStartupController_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kBrowserStartupControllerClassPath[] =
    "org/chromium/content/browser/BrowserStartupController";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_BrowserStartupController_clazz = NULL;
}  // namespace

namespace content {

static void SetCommandLineFlags(JNIEnv* env, jclass clazz,
    jint maxRenderProcesses,
    jstring pluginDescriptor);

static jboolean IsOfficialBuild(JNIEnv* env, jclass clazz);

static jboolean IsPluginEnabled(JNIEnv* env, jclass clazz);

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_BrowserStartupController_browserMayStartAsynchonously = 0;
static jboolean
    Java_BrowserStartupController_browserMayStartAsynchonously(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserStartupController_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_BrowserStartupController_clazz,
      "browserMayStartAsynchonously",

"("
")"
"Z",
      &g_BrowserStartupController_browserMayStartAsynchonously);

  jboolean ret =
    env->CallStaticBooleanMethod(g_BrowserStartupController_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_BrowserStartupController_browserStartupComplete = 0;
static void Java_BrowserStartupController_browserStartupComplete(JNIEnv* env,
    jint result) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserStartupController_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_BrowserStartupController_clazz,
      "browserStartupComplete",

"("
"I"
")"
"V",
      &g_BrowserStartupController_browserStartupComplete);

  env->CallStaticVoidMethod(g_BrowserStartupController_clazz,
      method_id, result);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_BrowserStartupController_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kBrowserStartupControllerClassPath).obj()));
  static const JNINativeMethod kMethodsBrowserStartupController[] = {
    { "nativeSetCommandLineFlags",
"("
"I"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(SetCommandLineFlags) },
    { "nativeIsOfficialBuild",
"("
")"
"Z", reinterpret_cast<void*>(IsOfficialBuild) },
    { "nativeIsPluginEnabled",
"("
")"
"Z", reinterpret_cast<void*>(IsPluginEnabled) },
  };
  const int kMethodsBrowserStartupControllerSize =
      arraysize(kMethodsBrowserStartupController);

  if (env->RegisterNatives(g_BrowserStartupController_clazz,
                           kMethodsBrowserStartupController,
                           kMethodsBrowserStartupControllerSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_chromium_content_browser_BrowserStartupController_JNI
