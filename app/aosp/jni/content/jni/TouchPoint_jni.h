// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/TouchPoint

#ifndef org_chromium_content_browser_TouchPoint_JNI
#define org_chromium_content_browser_TouchPoint_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kTouchPointClassPath[] =
    "org/chromium/content/browser/TouchPoint";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_TouchPoint_clazz = NULL;
}  // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord g_TouchPoint_getState = 0;
static jint Java_TouchPoint_getState(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_TouchPoint_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_TouchPoint_clazz,
      "getState",

"("
")"
"I",
      &g_TouchPoint_getState);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_TouchPoint_getId = 0;
static jint Java_TouchPoint_getId(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_TouchPoint_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_TouchPoint_clazz,
      "getId",

"("
")"
"I",
      &g_TouchPoint_getId);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_TouchPoint_getX = 0;
static jint Java_TouchPoint_getX(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_TouchPoint_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_TouchPoint_clazz,
      "getX",

"("
")"
"I",
      &g_TouchPoint_getX);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_TouchPoint_getY = 0;
static jint Java_TouchPoint_getY(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_TouchPoint_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_TouchPoint_clazz,
      "getY",

"("
")"
"I",
      &g_TouchPoint_getY);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_TouchPoint_getPressure = 0;
static jfloat Java_TouchPoint_getPressure(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_TouchPoint_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_TouchPoint_clazz,
      "getPressure",

"("
")"
"F",
      &g_TouchPoint_getPressure);

  jfloat ret =
    env->CallFloatMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_TouchPoint_getTouchMajor = 0;
static jfloat Java_TouchPoint_getTouchMajor(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_TouchPoint_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_TouchPoint_clazz,
      "getTouchMajor",

"("
")"
"F",
      &g_TouchPoint_getTouchMajor);

  jfloat ret =
    env->CallFloatMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_TouchPoint_getTouchMinor = 0;
static jfloat Java_TouchPoint_getTouchMinor(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_TouchPoint_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_TouchPoint_clazz,
      "getTouchMinor",

"("
")"
"F",
      &g_TouchPoint_getTouchMinor);

  jfloat ret =
    env->CallFloatMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_TouchPoint_getOrientation = 0;
static jfloat Java_TouchPoint_getOrientation(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_TouchPoint_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_TouchPoint_clazz,
      "getOrientation",

"("
")"
"F",
      &g_TouchPoint_getOrientation);

  jfloat ret =
    env->CallFloatMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_TouchPoint_initializeConstants = 0;
static void Java_TouchPoint_initializeConstants(JNIEnv* env, jint
    touchTypeStart,
    jint touchTypeMove,
    jint touchTypeEnd,
    jint touchTypeCancel,
    jint touchPointUndefined,
    jint touchPointReleased,
    jint touchPointPressed,
    jint touchPointMoved,
    jint touchPointStationary,
    jint touchPointCancelled) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_TouchPoint_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_TouchPoint_clazz,
      "initializeConstants",

"("
"I"
"I"
"I"
"I"
"I"
"I"
"I"
"I"
"I"
"I"
")"
"V",
      &g_TouchPoint_initializeConstants);

  env->CallStaticVoidMethod(g_TouchPoint_clazz,
      method_id, touchTypeStart, touchTypeMove, touchTypeEnd, touchTypeCancel,
          touchPointUndefined, touchPointReleased, touchPointPressed,
          touchPointMoved, touchPointStationary, touchPointCancelled);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_TouchPoint_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kTouchPointClassPath).obj()));
  return true;
}

#endif  // org_chromium_content_browser_TouchPoint_JNI
