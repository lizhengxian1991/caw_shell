// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/app/LibraryLoader

#ifndef org_chromium_content_app_LibraryLoader_JNI
#define org_chromium_content_app_LibraryLoader_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kLibraryLoaderClassPath[] =
    "org/chromium/content/app/LibraryLoader";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_LibraryLoader_clazz = NULL;
}  // namespace

namespace content {

static jint LibraryLoaded(JNIEnv* env, jclass clazz,
    jobjectArray initCommandLine);

static void RecordContentAndroidLinkerHistogram(JNIEnv* env, jclass clazz,
    jboolean loadedAtFixedAddressFailed,
    jboolean isLowMemoryDevice);

static jstring GetVersionNumber(JNIEnv* env, jclass clazz);

// Step 2: method stubs.

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_LibraryLoader_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kLibraryLoaderClassPath).obj()));
  static const JNINativeMethod kMethodsLibraryLoader[] = {
    { "nativeLibraryLoaded",
"("
"[Ljava/lang/String;"
")"
"I", reinterpret_cast<void*>(LibraryLoaded) },
    { "nativeRecordContentAndroidLinkerHistogram",
"("
"Z"
"Z"
")"
"V", reinterpret_cast<void*>(RecordContentAndroidLinkerHistogram) },
    { "nativeGetVersionNumber",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetVersionNumber) },
  };
  const int kMethodsLibraryLoaderSize = arraysize(kMethodsLibraryLoader);

  if (env->RegisterNatives(g_LibraryLoader_clazz,
                           kMethodsLibraryLoader,
                           kMethodsLibraryLoaderSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_chromium_content_app_LibraryLoader_JNI
