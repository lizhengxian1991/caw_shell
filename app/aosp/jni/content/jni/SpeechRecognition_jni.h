// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/SpeechRecognition

#ifndef org_chromium_content_browser_SpeechRecognition_JNI
#define org_chromium_content_browser_SpeechRecognition_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSpeechRecognitionClassPath[] =
    "org/chromium/content/browser/SpeechRecognition";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SpeechRecognition_clazz = NULL;
}  // namespace

namespace content {

// Step 2: method stubs.
static void OnAudioStart(JNIEnv* env, jobject obj,
    jlong nativeSpeechRecognizerImplAndroid) {
  DCHECK(nativeSpeechRecognizerImplAndroid) << "OnAudioStart";
  SpeechRecognizerImplAndroid* native =
      reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
  return native->OnAudioStart(env, obj);
}

static void OnSoundStart(JNIEnv* env, jobject obj,
    jlong nativeSpeechRecognizerImplAndroid) {
  DCHECK(nativeSpeechRecognizerImplAndroid) << "OnSoundStart";
  SpeechRecognizerImplAndroid* native =
      reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
  return native->OnSoundStart(env, obj);
}

static void OnSoundEnd(JNIEnv* env, jobject obj,
    jlong nativeSpeechRecognizerImplAndroid) {
  DCHECK(nativeSpeechRecognizerImplAndroid) << "OnSoundEnd";
  SpeechRecognizerImplAndroid* native =
      reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
  return native->OnSoundEnd(env, obj);
}

static void OnAudioEnd(JNIEnv* env, jobject obj,
    jlong nativeSpeechRecognizerImplAndroid) {
  DCHECK(nativeSpeechRecognizerImplAndroid) << "OnAudioEnd";
  SpeechRecognizerImplAndroid* native =
      reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
  return native->OnAudioEnd(env, obj);
}

static void OnRecognitionResults(JNIEnv* env, jobject obj,
    jlong nativeSpeechRecognizerImplAndroid,
    jobjectArray results,
    jfloatArray scores,
    jboolean provisional) {
  DCHECK(nativeSpeechRecognizerImplAndroid) << "OnRecognitionResults";
  SpeechRecognizerImplAndroid* native =
      reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
  return native->OnRecognitionResults(env, obj, results, scores, provisional);
}

static void OnRecognitionError(JNIEnv* env, jobject obj,
    jlong nativeSpeechRecognizerImplAndroid,
    jint error) {
  DCHECK(nativeSpeechRecognizerImplAndroid) << "OnRecognitionError";
  SpeechRecognizerImplAndroid* native =
      reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
  return native->OnRecognitionError(env, obj, error);
}

static void OnRecognitionEnd(JNIEnv* env, jobject obj,
    jlong nativeSpeechRecognizerImplAndroid) {
  DCHECK(nativeSpeechRecognizerImplAndroid) << "OnRecognitionEnd";
  SpeechRecognizerImplAndroid* native =
      reinterpret_cast<SpeechRecognizerImplAndroid*>(nativeSpeechRecognizerImplAndroid);
  return native->OnRecognitionEnd(env, obj);
}

static base::subtle::AtomicWord g_SpeechRecognition_createSpeechRecognition = 0;
static ScopedJavaLocalRef<jobject>
    Java_SpeechRecognition_createSpeechRecognition(JNIEnv* env, jobject context,
    jlong nativeSpeechRecognizerImplAndroid) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SpeechRecognition_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SpeechRecognition_clazz,
      "createSpeechRecognition",

"("
"Landroid/content/Context;"
"J"
")"
"Lorg/chromium/content/browser/SpeechRecognition;",
      &g_SpeechRecognition_createSpeechRecognition);

  jobject ret =
    env->CallStaticObjectMethod(g_SpeechRecognition_clazz,
      method_id, context, nativeSpeechRecognizerImplAndroid);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SpeechRecognition_startRecognition = 0;
static void Java_SpeechRecognition_startRecognition(JNIEnv* env, jobject obj,
    jstring language,
    jboolean continuous,
    jboolean interimResults) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SpeechRecognition_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SpeechRecognition_clazz,
      "startRecognition",

"("
"Ljava/lang/String;"
"Z"
"Z"
")"
"V",
      &g_SpeechRecognition_startRecognition);

  env->CallVoidMethod(obj,
      method_id, language, continuous, interimResults);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SpeechRecognition_abortRecognition = 0;
static void Java_SpeechRecognition_abortRecognition(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SpeechRecognition_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SpeechRecognition_clazz,
      "abortRecognition",

"("
")"
"V",
      &g_SpeechRecognition_abortRecognition);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SpeechRecognition_stopRecognition = 0;
static void Java_SpeechRecognition_stopRecognition(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SpeechRecognition_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SpeechRecognition_clazz,
      "stopRecognition",

"("
")"
"V",
      &g_SpeechRecognition_stopRecognition);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SpeechRecognition_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSpeechRecognitionClassPath).obj()));
  static const JNINativeMethod kMethodsSpeechRecognition[] = {
    { "nativeOnAudioStart",
"("
"J"
")"
"V", reinterpret_cast<void*>(OnAudioStart) },
    { "nativeOnSoundStart",
"("
"J"
")"
"V", reinterpret_cast<void*>(OnSoundStart) },
    { "nativeOnSoundEnd",
"("
"J"
")"
"V", reinterpret_cast<void*>(OnSoundEnd) },
    { "nativeOnAudioEnd",
"("
"J"
")"
"V", reinterpret_cast<void*>(OnAudioEnd) },
    { "nativeOnRecognitionResults",
"("
"J"
"[Ljava/lang/String;"
"[F"
"Z"
")"
"V", reinterpret_cast<void*>(OnRecognitionResults) },
    { "nativeOnRecognitionError",
"("
"J"
"I"
")"
"V", reinterpret_cast<void*>(OnRecognitionError) },
    { "nativeOnRecognitionEnd",
"("
"J"
")"
"V", reinterpret_cast<void*>(OnRecognitionEnd) },
  };
  const int kMethodsSpeechRecognitionSize =
      arraysize(kMethodsSpeechRecognition);

  if (env->RegisterNatives(g_SpeechRecognition_clazz,
                           kMethodsSpeechRecognition,
                           kMethodsSpeechRecognitionSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_chromium_content_browser_SpeechRecognition_JNI
