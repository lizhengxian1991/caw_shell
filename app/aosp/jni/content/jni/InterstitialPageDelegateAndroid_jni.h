// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/InterstitialPageDelegateAndroid

#ifndef org_chromium_content_browser_InterstitialPageDelegateAndroid_JNI
#define org_chromium_content_browser_InterstitialPageDelegateAndroid_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kInterstitialPageDelegateAndroidClassPath[] =
    "org/chromium/content/browser/InterstitialPageDelegateAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_InterstitialPageDelegateAndroid_clazz = NULL;
}  // namespace

namespace content {

static jlong Init(JNIEnv* env, jobject obj,
    jstring htmlContent);

// Step 2: method stubs.
static void Proceed(JNIEnv* env, jobject obj,
    jlong nativeInterstitialPageDelegateAndroid) {
  DCHECK(nativeInterstitialPageDelegateAndroid) << "Proceed";
  InterstitialPageDelegateAndroid* native =
      reinterpret_cast<InterstitialPageDelegateAndroid*>(nativeInterstitialPageDelegateAndroid);
  return native->Proceed(env, obj);
}

static void DontProceed(JNIEnv* env, jobject obj,
    jlong nativeInterstitialPageDelegateAndroid) {
  DCHECK(nativeInterstitialPageDelegateAndroid) << "DontProceed";
  InterstitialPageDelegateAndroid* native =
      reinterpret_cast<InterstitialPageDelegateAndroid*>(nativeInterstitialPageDelegateAndroid);
  return native->DontProceed(env, obj);
}

static base::subtle::AtomicWord g_InterstitialPageDelegateAndroid_onProceed = 0;
static void Java_InterstitialPageDelegateAndroid_onProceed(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_InterstitialPageDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_InterstitialPageDelegateAndroid_clazz,
      "onProceed",

"("
")"
"V",
      &g_InterstitialPageDelegateAndroid_onProceed);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_InterstitialPageDelegateAndroid_onDontProceed
    = 0;
static void Java_InterstitialPageDelegateAndroid_onDontProceed(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_InterstitialPageDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_InterstitialPageDelegateAndroid_clazz,
      "onDontProceed",

"("
")"
"V",
      &g_InterstitialPageDelegateAndroid_onDontProceed);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_InterstitialPageDelegateAndroid_commandReceived = 0;
static void Java_InterstitialPageDelegateAndroid_commandReceived(JNIEnv* env,
    jobject obj, jstring command) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_InterstitialPageDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_InterstitialPageDelegateAndroid_clazz,
      "commandReceived",

"("
"Ljava/lang/String;"
")"
"V",
      &g_InterstitialPageDelegateAndroid_commandReceived);

  env->CallVoidMethod(obj,
      method_id, command);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_InterstitialPageDelegateAndroid_onNativeDestroyed = 0;
static void Java_InterstitialPageDelegateAndroid_onNativeDestroyed(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_InterstitialPageDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_InterstitialPageDelegateAndroid_clazz,
      "onNativeDestroyed",

"("
")"
"V",
      &g_InterstitialPageDelegateAndroid_onNativeDestroyed);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_InterstitialPageDelegateAndroid_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kInterstitialPageDelegateAndroidClassPath).obj()));
  static const JNINativeMethod kMethodsInterstitialPageDelegateAndroid[] = {
    { "nativeInit",
"("
"Ljava/lang/String;"
")"
"J", reinterpret_cast<void*>(Init) },
    { "nativeProceed",
"("
"J"
")"
"V", reinterpret_cast<void*>(Proceed) },
    { "nativeDontProceed",
"("
"J"
")"
"V", reinterpret_cast<void*>(DontProceed) },
  };
  const int kMethodsInterstitialPageDelegateAndroidSize =
      arraysize(kMethodsInterstitialPageDelegateAndroid);

  if (env->RegisterNatives(g_InterstitialPageDelegateAndroid_clazz,
                           kMethodsInterstitialPageDelegateAndroid,
                           kMethodsInterstitialPageDelegateAndroidSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_chromium_content_browser_InterstitialPageDelegateAndroid_JNI
