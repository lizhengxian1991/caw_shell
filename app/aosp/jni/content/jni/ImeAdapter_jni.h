// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/input/ImeAdapter

#ifndef org_chromium_content_browser_input_ImeAdapter_JNI
#define org_chromium_content_browser_input_ImeAdapter_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kImeAdapterClassPath[] =
    "org/chromium/content/browser/input/ImeAdapter";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ImeAdapter_clazz = NULL;
}  // namespace

namespace content {

// Step 2: method stubs.
static jboolean SendSyntheticKeyEvent(JNIEnv* env, jobject obj,
    jlong nativeImeAdapterAndroid,
    jint eventType,
    jlong timestampMs,
    jint keyCode,
    jint unicodeChar) {
  DCHECK(nativeImeAdapterAndroid) << "SendSyntheticKeyEvent";
  ImeAdapterAndroid* native =
      reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  return native->SendSyntheticKeyEvent(env, obj, eventType, timestampMs,
      keyCode, unicodeChar);
}

static jboolean SendKeyEvent(JNIEnv* env, jobject obj,
    jlong nativeImeAdapterAndroid,
    jobject event,
    jint action,
    jint modifiers,
    jlong timestampMs,
    jint keyCode,
    jboolean isSystemKey,
    jint unicodeChar) {
  DCHECK(nativeImeAdapterAndroid) << "SendKeyEvent";
  ImeAdapterAndroid* native =
      reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  return native->SendKeyEvent(env, obj, event, action, modifiers, timestampMs,
      keyCode, isSystemKey, unicodeChar);
}

static void SetComposingText(JNIEnv* env, jobject obj,
    jlong nativeImeAdapterAndroid,
    jstring text,
    jint newCursorPosition) {
  DCHECK(nativeImeAdapterAndroid) << "SetComposingText";
  ImeAdapterAndroid* native =
      reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  return native->SetComposingText(env, obj, text, newCursorPosition);
}

static void CommitText(JNIEnv* env, jobject obj,
    jlong nativeImeAdapterAndroid,
    jstring text) {
  DCHECK(nativeImeAdapterAndroid) << "CommitText";
  ImeAdapterAndroid* native =
      reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  return native->CommitText(env, obj, text);
}

static void FinishComposingText(JNIEnv* env, jobject obj,
    jlong nativeImeAdapterAndroid) {
  DCHECK(nativeImeAdapterAndroid) << "FinishComposingText";
  ImeAdapterAndroid* native =
      reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  return native->FinishComposingText(env, obj);
}

static void AttachImeAdapter(JNIEnv* env, jobject obj,
    jlong nativeImeAdapterAndroid) {
  DCHECK(nativeImeAdapterAndroid) << "AttachImeAdapter";
  ImeAdapterAndroid* native =
      reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  return native->AttachImeAdapter(env, obj);
}

static void SetEditableSelectionOffsets(JNIEnv* env, jobject obj,
    jlong nativeImeAdapterAndroid,
    jint start,
    jint end) {
  DCHECK(nativeImeAdapterAndroid) << "SetEditableSelectionOffsets";
  ImeAdapterAndroid* native =
      reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  return native->SetEditableSelectionOffsets(env, obj, start, end);
}

static void SetComposingRegion(JNIEnv* env, jobject obj,
    jlong nativeImeAdapterAndroid,
    jint start,
    jint end) {
  DCHECK(nativeImeAdapterAndroid) << "SetComposingRegion";
  ImeAdapterAndroid* native =
      reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  return native->SetComposingRegion(env, obj, start, end);
}

static void DeleteSurroundingText(JNIEnv* env, jobject obj,
    jlong nativeImeAdapterAndroid,
    jint before,
    jint after) {
  DCHECK(nativeImeAdapterAndroid) << "DeleteSurroundingText";
  ImeAdapterAndroid* native =
      reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  return native->DeleteSurroundingText(env, obj, before, after);
}

static void Unselect(JNIEnv* env, jobject obj,
    jlong nativeImeAdapterAndroid) {
  DCHECK(nativeImeAdapterAndroid) << "Unselect";
  ImeAdapterAndroid* native =
      reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  return native->Unselect(env, obj);
}

static void SelectAll(JNIEnv* env, jobject obj,
    jlong nativeImeAdapterAndroid) {
  DCHECK(nativeImeAdapterAndroid) << "SelectAll";
  ImeAdapterAndroid* native =
      reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  return native->SelectAll(env, obj);
}

static void Cut(JNIEnv* env, jobject obj,
    jlong nativeImeAdapterAndroid) {
  DCHECK(nativeImeAdapterAndroid) << "Cut";
  ImeAdapterAndroid* native =
      reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  return native->Cut(env, obj);
}

static void Copy(JNIEnv* env, jobject obj,
    jlong nativeImeAdapterAndroid) {
  DCHECK(nativeImeAdapterAndroid) << "Copy";
  ImeAdapterAndroid* native =
      reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  return native->Copy(env, obj);
}

static void Paste(JNIEnv* env, jobject obj,
    jlong nativeImeAdapterAndroid) {
  DCHECK(nativeImeAdapterAndroid) << "Paste";
  ImeAdapterAndroid* native =
      reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  return native->Paste(env, obj);
}

static void ResetImeAdapter(JNIEnv* env, jobject obj,
    jlong nativeImeAdapterAndroid) {
  DCHECK(nativeImeAdapterAndroid) << "ResetImeAdapter";
  ImeAdapterAndroid* native =
      reinterpret_cast<ImeAdapterAndroid*>(nativeImeAdapterAndroid);
  return native->ResetImeAdapter(env, obj);
}

static base::subtle::AtomicWord g_ImeAdapter_initializeWebInputEvents = 0;
static void Java_ImeAdapter_initializeWebInputEvents(JNIEnv* env, jint
    eventTypeRawKeyDown,
    jint eventTypeKeyUp,
    jint eventTypeChar,
    jint modifierShift,
    jint modifierAlt,
    jint modifierCtrl,
    jint modifierCapsLockOn,
    jint modifierNumLockOn) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ImeAdapter_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ImeAdapter_clazz,
      "initializeWebInputEvents",

"("
"I"
"I"
"I"
"I"
"I"
"I"
"I"
"I"
")"
"V",
      &g_ImeAdapter_initializeWebInputEvents);

  env->CallStaticVoidMethod(g_ImeAdapter_clazz,
      method_id, eventTypeRawKeyDown, eventTypeKeyUp, eventTypeChar,
          modifierShift, modifierAlt, modifierCtrl, modifierCapsLockOn,
          modifierNumLockOn);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ImeAdapter_initializeTextInputTypes = 0;
static void Java_ImeAdapter_initializeTextInputTypes(JNIEnv* env, jint
    textInputTypeNone,
    jint textInputTypeText,
    jint textInputTypeTextArea,
    jint textInputTypePassword,
    jint textInputTypeSearch,
    jint textInputTypeUrl,
    jint textInputTypeEmail,
    jint textInputTypeTel,
    jint textInputTypeNumber,
    jint textInputTypeContentEditable) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ImeAdapter_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ImeAdapter_clazz,
      "initializeTextInputTypes",

"("
"I"
"I"
"I"
"I"
"I"
"I"
"I"
"I"
"I"
"I"
")"
"V",
      &g_ImeAdapter_initializeTextInputTypes);

  env->CallStaticVoidMethod(g_ImeAdapter_clazz,
      method_id, textInputTypeNone, textInputTypeText, textInputTypeTextArea,
          textInputTypePassword, textInputTypeSearch, textInputTypeUrl,
          textInputTypeEmail, textInputTypeTel, textInputTypeNumber,
          textInputTypeContentEditable);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ImeAdapter_cancelComposition = 0;
static void Java_ImeAdapter_cancelComposition(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ImeAdapter_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ImeAdapter_clazz,
      "cancelComposition",

"("
")"
"V",
      &g_ImeAdapter_cancelComposition);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ImeAdapter_detach = 0;
static void Java_ImeAdapter_detach(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ImeAdapter_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ImeAdapter_clazz,
      "detach",

"("
")"
"V",
      &g_ImeAdapter_detach);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_ImeAdapter_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kImeAdapterClassPath).obj()));
  static const JNINativeMethod kMethodsImeAdapter[] = {
    { "nativeSendSyntheticKeyEvent",
"("
"J"
"I"
"J"
"I"
"I"
")"
"Z", reinterpret_cast<void*>(SendSyntheticKeyEvent) },
    { "nativeSendKeyEvent",
"("
"J"
"Landroid/view/KeyEvent;"
"I"
"I"
"J"
"I"
"Z"
"I"
")"
"Z", reinterpret_cast<void*>(SendKeyEvent) },
    { "nativeSetComposingText",
"("
"J"
"Ljava/lang/String;"
"I"
")"
"V", reinterpret_cast<void*>(SetComposingText) },
    { "nativeCommitText",
"("
"J"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(CommitText) },
    { "nativeFinishComposingText",
"("
"J"
")"
"V", reinterpret_cast<void*>(FinishComposingText) },
    { "nativeAttachImeAdapter",
"("
"J"
")"
"V", reinterpret_cast<void*>(AttachImeAdapter) },
    { "nativeSetEditableSelectionOffsets",
"("
"J"
"I"
"I"
")"
"V", reinterpret_cast<void*>(SetEditableSelectionOffsets) },
    { "nativeSetComposingRegion",
"("
"J"
"I"
"I"
")"
"V", reinterpret_cast<void*>(SetComposingRegion) },
    { "nativeDeleteSurroundingText",
"("
"J"
"I"
"I"
")"
"V", reinterpret_cast<void*>(DeleteSurroundingText) },
    { "nativeUnselect",
"("
"J"
")"
"V", reinterpret_cast<void*>(Unselect) },
    { "nativeSelectAll",
"("
"J"
")"
"V", reinterpret_cast<void*>(SelectAll) },
    { "nativeCut",
"("
"J"
")"
"V", reinterpret_cast<void*>(Cut) },
    { "nativeCopy",
"("
"J"
")"
"V", reinterpret_cast<void*>(Copy) },
    { "nativePaste",
"("
"J"
")"
"V", reinterpret_cast<void*>(Paste) },
    { "nativeResetImeAdapter",
"("
"J"
")"
"V", reinterpret_cast<void*>(ResetImeAdapter) },
  };
  const int kMethodsImeAdapterSize = arraysize(kMethodsImeAdapter);

  if (env->RegisterNatives(g_ImeAdapter_clazz,
                           kMethodsImeAdapter,
                           kMethodsImeAdapterSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_chromium_content_browser_input_ImeAdapter_JNI
