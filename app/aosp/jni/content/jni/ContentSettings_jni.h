// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/ContentSettings

#ifndef org_chromium_content_browser_ContentSettings_JNI
#define org_chromium_content_browser_ContentSettings_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kContentSettingsClassPath[] =
    "org/chromium/content/browser/ContentSettings";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ContentSettings_clazz = NULL;
}  // namespace

namespace content {

static jlong Init(JNIEnv* env, jobject obj,
    jlong contentViewPtr);

// Step 2: method stubs.
static jboolean GetJavaScriptEnabled(JNIEnv* env, jobject obj,
    jlong nativeContentSettings) {
  DCHECK(nativeContentSettings) << "GetJavaScriptEnabled";
  ContentSettings* native =
      reinterpret_cast<ContentSettings*>(nativeContentSettings);
  return native->GetJavaScriptEnabled(env, obj);
}

static base::subtle::AtomicWord
    g_ContentSettings_onNativeContentSettingsDestroyed = 0;
static void Java_ContentSettings_onNativeContentSettingsDestroyed(JNIEnv* env,
    jobject obj, jint nativeContentSettings) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ContentSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentSettings_clazz,
      "onNativeContentSettingsDestroyed",

"("
"I"
")"
"V",
      &g_ContentSettings_onNativeContentSettingsDestroyed);

  env->CallVoidMethod(obj,
      method_id, nativeContentSettings);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_ContentSettings_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kContentSettingsClassPath).obj()));
  static const JNINativeMethod kMethodsContentSettings[] = {
    { "nativeInit",
"("
"J"
")"
"J", reinterpret_cast<void*>(Init) },
    { "nativeGetJavaScriptEnabled",
"("
"J"
")"
"Z", reinterpret_cast<void*>(GetJavaScriptEnabled) },
  };
  const int kMethodsContentSettingsSize = arraysize(kMethodsContentSettings);

  if (env->RegisterNatives(g_ContentSettings_clazz,
                           kMethodsContentSettings,
                           kMethodsContentSettingsSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_chromium_content_browser_ContentSettings_JNI
