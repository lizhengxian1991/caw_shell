// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/app/ContentMain

#ifndef org_chromium_content_app_ContentMain_JNI
#define org_chromium_content_app_ContentMain_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kContentMainClassPath[] =
    "org/chromium/content/app/ContentMain";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ContentMain_clazz = NULL;
}  // namespace

namespace content {

static void InitApplicationContext(JNIEnv* env, jclass clazz,
    jobject context);

static jint Start(JNIEnv* env, jclass clazz);

// Step 2: method stubs.

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_ContentMain_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kContentMainClassPath).obj()));
  static const JNINativeMethod kMethodsContentMain[] = {
    { "nativeInitApplicationContext",
"("
"Landroid/content/Context;"
")"
"V", reinterpret_cast<void*>(InitApplicationContext) },
    { "nativeStart",
"("
")"
"I", reinterpret_cast<void*>(Start) },
  };
  const int kMethodsContentMainSize = arraysize(kMethodsContentMain);

  if (env->RegisterNatives(g_ContentMain_clazz,
                           kMethodsContentMain,
                           kMethodsContentMainSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_chromium_content_app_ContentMain_JNI
