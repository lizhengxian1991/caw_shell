// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/LoadUrlParams

#ifndef org_chromium_content_browser_LoadUrlParams_JNI
#define org_chromium_content_browser_LoadUrlParams_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kLoadUrlParamsClassPath[] =
    "org/chromium/content/browser/LoadUrlParams";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_LoadUrlParams_clazz = NULL;
}  // namespace

namespace content {

static jboolean IsDataScheme(JNIEnv* env, jclass clazz,
    jstring url);

// Step 2: method stubs.

static base::subtle::AtomicWord g_LoadUrlParams_initializeConstants = 0;
static void Java_LoadUrlParams_initializeConstants(JNIEnv* env, jint
    load_type_default,
    jint load_type_browser_initiated_http_post,
    jint load_type_data,
    jint ua_override_inherit,
    jint ua_override_false,
    jint ua_override_true) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_LoadUrlParams_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_LoadUrlParams_clazz,
      "initializeConstants",

"("
"I"
"I"
"I"
"I"
"I"
"I"
")"
"V",
      &g_LoadUrlParams_initializeConstants);

  env->CallStaticVoidMethod(g_LoadUrlParams_clazz,
      method_id, load_type_default, load_type_browser_initiated_http_post,
          load_type_data, ua_override_inherit, ua_override_false,
          ua_override_true);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_LoadUrlParams_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kLoadUrlParamsClassPath).obj()));
  static const JNINativeMethod kMethodsLoadUrlParams[] = {
    { "nativeIsDataScheme",
"("
"Ljava/lang/String;"
")"
"Z", reinterpret_cast<void*>(IsDataScheme) },
  };
  const int kMethodsLoadUrlParamsSize = arraysize(kMethodsLoadUrlParams);

  if (env->RegisterNatives(g_LoadUrlParams_clazz,
                           kMethodsLoadUrlParams,
                           kMethodsLoadUrlParamsSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_chromium_content_browser_LoadUrlParams_JNI
