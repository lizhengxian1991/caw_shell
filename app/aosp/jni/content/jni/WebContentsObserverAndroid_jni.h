// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/WebContentsObserverAndroid

#ifndef org_chromium_content_browser_WebContentsObserverAndroid_JNI
#define org_chromium_content_browser_WebContentsObserverAndroid_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kWebContentsObserverAndroidClassPath[] =
    "org/chromium/content/browser/WebContentsObserverAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_WebContentsObserverAndroid_clazz = NULL;
}  // namespace

namespace content {

static jlong Init(JNIEnv* env, jobject obj,
    jlong contentViewCorePtr);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jlong nativeWebContentsObserverAndroid) {
  DCHECK(nativeWebContentsObserverAndroid) << "Destroy";
  WebContentsObserverAndroid* native =
      reinterpret_cast<WebContentsObserverAndroid*>(nativeWebContentsObserverAndroid);
  return native->Destroy(env, obj);
}

static base::subtle::AtomicWord g_WebContentsObserverAndroid_renderProcessGone =
    0;
static void Java_WebContentsObserverAndroid_renderProcessGone(JNIEnv* env,
    jobject obj, jboolean wasOomProtected) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsObserverAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsObserverAndroid_clazz,
      "renderProcessGone",

"("
"Z"
")"
"V",
      &g_WebContentsObserverAndroid_renderProcessGone);

  env->CallVoidMethod(obj,
      method_id, wasOomProtected);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebContentsObserverAndroid_didStartLoading =
    0;
static void Java_WebContentsObserverAndroid_didStartLoading(JNIEnv* env, jobject
    obj, jstring url) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsObserverAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsObserverAndroid_clazz,
      "didStartLoading",

"("
"Ljava/lang/String;"
")"
"V",
      &g_WebContentsObserverAndroid_didStartLoading);

  env->CallVoidMethod(obj,
      method_id, url);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebContentsObserverAndroid_didStopLoading = 0;
static void Java_WebContentsObserverAndroid_didStopLoading(JNIEnv* env, jobject
    obj, jstring url) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsObserverAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsObserverAndroid_clazz,
      "didStopLoading",

"("
"Ljava/lang/String;"
")"
"V",
      &g_WebContentsObserverAndroid_didStopLoading);

  env->CallVoidMethod(obj,
      method_id, url);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebContentsObserverAndroid_didFailLoad = 0;
static void Java_WebContentsObserverAndroid_didFailLoad(JNIEnv* env, jobject
    obj, jboolean isProvisionalLoad,
    jboolean isMainFrame,
    jint errorCode,
    jstring description,
    jstring failingUrl) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsObserverAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsObserverAndroid_clazz,
      "didFailLoad",

"("
"Z"
"Z"
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_WebContentsObserverAndroid_didFailLoad);

  env->CallVoidMethod(obj,
      method_id, isProvisionalLoad, isMainFrame, errorCode, description,
          failingUrl);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_WebContentsObserverAndroid_didNavigateMainFrameV_JLS_JLS_Z = 0;
static void
    Java_WebContentsObserverAndroid_didNavigateMainFrameV_JLS_JLS_Z(JNIEnv* env,
    jobject obj, jstring url,
    jstring baseUrl,
    jboolean isNavigationToDifferentPage) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsObserverAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsObserverAndroid_clazz,
      "didNavigateMainFrame",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
")"
"V",
      &g_WebContentsObserverAndroid_didNavigateMainFrameV_JLS_JLS_Z);

  env->CallVoidMethod(obj,
      method_id, url, baseUrl, isNavigationToDifferentPage);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_WebContentsObserverAndroid_didNavigateMainFrameV_JLS_JLS_Z_Z = 0;
static void
    Java_WebContentsObserverAndroid_didNavigateMainFrameV_JLS_JLS_Z_Z(JNIEnv*
    env, jobject obj, jstring url,
    jstring baseUrl,
    jboolean isNavigationToDifferentPage,
    jboolean isNavigationInPage) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsObserverAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsObserverAndroid_clazz,
      "didNavigateMainFrame",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
"Z"
")"
"V",
      &g_WebContentsObserverAndroid_didNavigateMainFrameV_JLS_JLS_Z_Z);

  env->CallVoidMethod(obj,
      method_id, url, baseUrl, isNavigationToDifferentPage, isNavigationInPage);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebContentsObserverAndroid_didNavigateAnyFrame
    = 0;
static void Java_WebContentsObserverAndroid_didNavigateAnyFrame(JNIEnv* env,
    jobject obj, jstring url,
    jstring baseUrl,
    jboolean isReload) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsObserverAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsObserverAndroid_clazz,
      "didNavigateAnyFrame",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
")"
"V",
      &g_WebContentsObserverAndroid_didNavigateAnyFrame);

  env->CallVoidMethod(obj,
      method_id, url, baseUrl, isReload);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_WebContentsObserverAndroid_didStartProvisionalLoadForFrame = 0;
static void
    Java_WebContentsObserverAndroid_didStartProvisionalLoadForFrame(JNIEnv* env,
    jobject obj, jlong frameId,
    jlong parentFrameId,
    jboolean isMainFrame,
    jstring validatedUrl,
    jboolean isErrorPage,
    jboolean isIframeSrcdoc) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsObserverAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsObserverAndroid_clazz,
      "didStartProvisionalLoadForFrame",

"("
"J"
"J"
"Z"
"Ljava/lang/String;"
"Z"
"Z"
")"
"V",
      &g_WebContentsObserverAndroid_didStartProvisionalLoadForFrame);

  env->CallVoidMethod(obj,
      method_id, frameId, parentFrameId, isMainFrame, validatedUrl, isErrorPage,
          isIframeSrcdoc);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_WebContentsObserverAndroid_didCommitProvisionalLoadForFrame = 0;
static void
    Java_WebContentsObserverAndroid_didCommitProvisionalLoadForFrame(JNIEnv*
    env, jobject obj, jlong frameId,
    jboolean isMainFrame,
    jstring url,
    jint transitionType) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsObserverAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsObserverAndroid_clazz,
      "didCommitProvisionalLoadForFrame",

"("
"J"
"Z"
"Ljava/lang/String;"
"I"
")"
"V",
      &g_WebContentsObserverAndroid_didCommitProvisionalLoadForFrame);

  env->CallVoidMethod(obj,
      method_id, frameId, isMainFrame, url, transitionType);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebContentsObserverAndroid_didFinishLoad = 0;
static void Java_WebContentsObserverAndroid_didFinishLoad(JNIEnv* env, jobject
    obj, jlong frameId,
    jstring validatedUrl,
    jboolean isMainFrame) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsObserverAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsObserverAndroid_clazz,
      "didFinishLoad",

"("
"J"
"Ljava/lang/String;"
"Z"
")"
"V",
      &g_WebContentsObserverAndroid_didFinishLoad);

  env->CallVoidMethod(obj,
      method_id, frameId, validatedUrl, isMainFrame);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_WebContentsObserverAndroid_navigationEntryCommitted = 0;
static void Java_WebContentsObserverAndroid_navigationEntryCommitted(JNIEnv*
    env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsObserverAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsObserverAndroid_clazz,
      "navigationEntryCommitted",

"("
")"
"V",
      &g_WebContentsObserverAndroid_navigationEntryCommitted);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_WebContentsObserverAndroid_didChangeVisibleSSLState = 0;
static void Java_WebContentsObserverAndroid_didChangeVisibleSSLState(JNIEnv*
    env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsObserverAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsObserverAndroid_clazz,
      "didChangeVisibleSSLState",

"("
")"
"V",
      &g_WebContentsObserverAndroid_didChangeVisibleSSLState);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_WebContentsObserverAndroid_didAttachInterstitialPage = 0;
static void Java_WebContentsObserverAndroid_didAttachInterstitialPage(JNIEnv*
    env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsObserverAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsObserverAndroid_clazz,
      "didAttachInterstitialPage",

"("
")"
"V",
      &g_WebContentsObserverAndroid_didAttachInterstitialPage);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_WebContentsObserverAndroid_didDetachInterstitialPage = 0;
static void Java_WebContentsObserverAndroid_didDetachInterstitialPage(JNIEnv*
    env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsObserverAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsObserverAndroid_clazz,
      "didDetachInterstitialPage",

"("
")"
"V",
      &g_WebContentsObserverAndroid_didDetachInterstitialPage);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_WebContentsObserverAndroid_detachFromWebContents = 0;
static void Java_WebContentsObserverAndroid_detachFromWebContents(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsObserverAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsObserverAndroid_clazz,
      "detachFromWebContents",

"("
")"
"V",
      &g_WebContentsObserverAndroid_detachFromWebContents);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_WebContentsObserverAndroid_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kWebContentsObserverAndroidClassPath).obj()));
  static const JNINativeMethod kMethodsWebContentsObserverAndroid[] = {
    { "nativeInit",
"("
"J"
")"
"J", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"J"
")"
"V", reinterpret_cast<void*>(Destroy) },
  };
  const int kMethodsWebContentsObserverAndroidSize =
      arraysize(kMethodsWebContentsObserverAndroid);

  if (env->RegisterNatives(g_WebContentsObserverAndroid_clazz,
                           kMethodsWebContentsObserverAndroid,
                           kMethodsWebContentsObserverAndroidSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_chromium_content_browser_WebContentsObserverAndroid_JNI
