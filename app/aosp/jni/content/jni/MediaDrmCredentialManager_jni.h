// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/MediaDrmCredentialManager

#ifndef org_chromium_content_browser_MediaDrmCredentialManager_JNI
#define org_chromium_content_browser_MediaDrmCredentialManager_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kMediaDrmCredentialManagerClassPath[] =
    "org/chromium/content/browser/MediaDrmCredentialManager";
const char kMediaDrmCredentialManagerCallbackClassPath[] =
    "org/chromium/content/browser/MediaDrmCredentialManager$MediaDrmCredentialManagerCallback";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_MediaDrmCredentialManager_clazz = NULL;
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_MediaDrmCredentialManagerCallback_clazz = NULL;
}  // namespace

namespace content {

static void ResetCredentials(JNIEnv* env, jclass clazz,
    jobject callback);

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_MediaDrmCredentialManagerCallback_onCredentialResetFinished = 0;
static void
    Java_MediaDrmCredentialManagerCallback_onCredentialResetFinished(JNIEnv*
    env, jobject obj, jboolean succeeded) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaDrmCredentialManagerCallback_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaDrmCredentialManagerCallback_clazz,
      "onCredentialResetFinished",

"("
"Z"
")"
"V",
      &g_MediaDrmCredentialManagerCallback_onCredentialResetFinished);

  env->CallVoidMethod(obj,
      method_id, succeeded);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_MediaDrmCredentialManager_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kMediaDrmCredentialManagerClassPath).obj()));
  g_MediaDrmCredentialManagerCallback_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kMediaDrmCredentialManagerCallbackClassPath).obj()));
  static const JNINativeMethod kMethodsMediaDrmCredentialManager[] = {
    { "nativeResetCredentials",
"("
"Lorg/chromium/content/browser/MediaDrmCredentialManager$MediaDrmCredentialManagerCallback;"
")"
"V", reinterpret_cast<void*>(ResetCredentials) },
  };
  const int kMethodsMediaDrmCredentialManagerSize =
      arraysize(kMethodsMediaDrmCredentialManager);

  if (env->RegisterNatives(g_MediaDrmCredentialManager_clazz,
                           kMethodsMediaDrmCredentialManager,
                           kMethodsMediaDrmCredentialManagerSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_chromium_content_browser_MediaDrmCredentialManager_JNI
