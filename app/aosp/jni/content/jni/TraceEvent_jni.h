// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/common/TraceEvent

#ifndef org_chromium_content_common_TraceEvent_JNI
#define org_chromium_content_common_TraceEvent_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kTraceEventClassPath[] =
    "org/chromium/content/common/TraceEvent";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_TraceEvent_clazz = NULL;
}  // namespace

static jboolean TraceEnabled(JNIEnv* env, jclass clazz);

static void StartATrace(JNIEnv* env, jclass clazz);

static void StopATrace(JNIEnv* env, jclass clazz);

static void Instant(JNIEnv* env, jclass clazz,
    jstring name,
    jstring arg);

static void Begin(JNIEnv* env, jclass clazz,
    jstring name,
    jstring arg);

static void End(JNIEnv* env, jclass clazz,
    jstring name,
    jstring arg);

static void StartAsync(JNIEnv* env, jclass clazz,
    jstring name,
    jlong id,
    jstring arg);

static void FinishAsync(JNIEnv* env, jclass clazz,
    jstring name,
    jlong id,
    jstring arg);

// Step 2: method stubs.

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_TraceEvent_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kTraceEventClassPath).obj()));
  static const JNINativeMethod kMethodsTraceEvent[] = {
    { "nativeTraceEnabled",
"("
")"
"Z", reinterpret_cast<void*>(TraceEnabled) },
    { "nativeStartATrace",
"("
")"
"V", reinterpret_cast<void*>(StartATrace) },
    { "nativeStopATrace",
"("
")"
"V", reinterpret_cast<void*>(StopATrace) },
    { "nativeInstant",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(Instant) },
    { "nativeBegin",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(Begin) },
    { "nativeEnd",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(End) },
    { "nativeStartAsync",
"("
"Ljava/lang/String;"
"J"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(StartAsync) },
    { "nativeFinishAsync",
"("
"Ljava/lang/String;"
"J"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(FinishAsync) },
  };
  const int kMethodsTraceEventSize = arraysize(kMethodsTraceEvent);

  if (env->RegisterNatives(g_TraceEvent_clazz,
                           kMethodsTraceEvent,
                           kMethodsTraceEventSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_chromium_content_common_TraceEvent_JNI
