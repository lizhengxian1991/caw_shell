// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/ChildProcessLauncher

#ifndef org_chromium_content_browser_ChildProcessLauncher_JNI
#define org_chromium_content_browser_ChildProcessLauncher_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kChildProcessLauncherClassPath[] =
    "org/chromium/content/browser/ChildProcessLauncher";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ChildProcessLauncher_clazz = NULL;
}  // namespace

namespace content {

static void OnChildProcessStarted(JNIEnv* env, jclass clazz,
    jlong clientContext,
    jint pid);

static jobject GetViewSurface(JNIEnv* env, jclass clazz,
    jint surfaceId);

static void EstablishSurfacePeer(JNIEnv* env, jclass clazz,
    jint pid,
    jobject surface,
    jint primaryID,
    jint secondaryID);

static jboolean IsSingleProcess(JNIEnv* env, jclass clazz);

// Step 2: method stubs.

static base::subtle::AtomicWord g_ChildProcessLauncher_isOomProtected = 0;
static jboolean Java_ChildProcessLauncher_isOomProtected(JNIEnv* env, jint pid)
    {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ChildProcessLauncher_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ChildProcessLauncher_clazz,
      "isOomProtected",

"("
"I"
")"
"Z",
      &g_ChildProcessLauncher_isOomProtected);

  jboolean ret =
    env->CallStaticBooleanMethod(g_ChildProcessLauncher_clazz,
      method_id, pid);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ChildProcessLauncher_start = 0;
static void Java_ChildProcessLauncher_start(JNIEnv* env, jobject context,
    jobjectArray commandLine,
    jintArray fileIds,
    jintArray fileFds,
    jbooleanArray fileAutoClose,
    jlong clientContext) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ChildProcessLauncher_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ChildProcessLauncher_clazz,
      "start",

"("
"Landroid/content/Context;"
"[Ljava/lang/String;"
"[I"
"[I"
"[Z"
"J"
")"
"V",
      &g_ChildProcessLauncher_start);

  env->CallStaticVoidMethod(g_ChildProcessLauncher_clazz,
      method_id, context, commandLine, fileIds, fileFds, fileAutoClose,
          clientContext);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ChildProcessLauncher_stop = 0;
static void Java_ChildProcessLauncher_stop(JNIEnv* env, jint pid) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ChildProcessLauncher_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ChildProcessLauncher_clazz,
      "stop",

"("
"I"
")"
"V",
      &g_ChildProcessLauncher_stop);

  env->CallStaticVoidMethod(g_ChildProcessLauncher_clazz,
      method_id, pid);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_ChildProcessLauncher_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kChildProcessLauncherClassPath).obj()));
  static const JNINativeMethod kMethodsChildProcessLauncher[] = {
    { "nativeOnChildProcessStarted",
"("
"J"
"I"
")"
"V", reinterpret_cast<void*>(OnChildProcessStarted) },
    { "nativeGetViewSurface",
"("
"I"
")"
"Landroid/view/Surface;", reinterpret_cast<void*>(GetViewSurface) },
    { "nativeEstablishSurfacePeer",
"("
"I"
"Landroid/view/Surface;"
"I"
"I"
")"
"V", reinterpret_cast<void*>(EstablishSurfacePeer) },
    { "nativeIsSingleProcess",
"("
")"
"Z", reinterpret_cast<void*>(IsSingleProcess) },
  };
  const int kMethodsChildProcessLauncherSize =
      arraysize(kMethodsChildProcessLauncher);

  if (env->RegisterNatives(g_ChildProcessLauncher_clazz,
                           kMethodsChildProcessLauncher,
                           kMethodsChildProcessLauncherSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_chromium_content_browser_ChildProcessLauncher_JNI
