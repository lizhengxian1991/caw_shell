// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/accessibility/BrowserAccessibilityManager

#ifndef org_chromium_content_browser_accessibility_BrowserAccessibilityManager_JNI
#define org_chromium_content_browser_accessibility_BrowserAccessibilityManager_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kBrowserAccessibilityManagerClassPath[] =
    "org/chromium/content/browser/accessibility/BrowserAccessibilityManager";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_BrowserAccessibilityManager_clazz = NULL;
}  // namespace

namespace content {

// Step 2: method stubs.
static jint GetRootId(JNIEnv* env, jobject obj,
    jlong nativeBrowserAccessibilityManagerAndroid) {
  DCHECK(nativeBrowserAccessibilityManagerAndroid) << "GetRootId";
  BrowserAccessibilityManagerAndroid* native =
      reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
  return native->GetRootId(env, obj);
}

static jboolean IsNodeValid(JNIEnv* env, jobject obj,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id) {
  DCHECK(nativeBrowserAccessibilityManagerAndroid) << "IsNodeValid";
  BrowserAccessibilityManagerAndroid* native =
      reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
  return native->IsNodeValid(env, obj, id);
}

static jint HitTest(JNIEnv* env, jobject obj,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint x,
    jint y) {
  DCHECK(nativeBrowserAccessibilityManagerAndroid) << "HitTest";
  BrowserAccessibilityManagerAndroid* native =
      reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
  return native->HitTest(env, obj, x, y);
}

static jboolean PopulateAccessibilityNodeInfo(JNIEnv* env, jobject obj,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jobject info,
    jint id) {
  DCHECK(nativeBrowserAccessibilityManagerAndroid) <<
      "PopulateAccessibilityNodeInfo";
  BrowserAccessibilityManagerAndroid* native =
      reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
  return native->PopulateAccessibilityNodeInfo(env, obj, info, id);
}

static jboolean PopulateAccessibilityEvent(JNIEnv* env, jobject obj,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jobject event,
    jint id,
    jint eventType) {
  DCHECK(nativeBrowserAccessibilityManagerAndroid) <<
      "PopulateAccessibilityEvent";
  BrowserAccessibilityManagerAndroid* native =
      reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
  return native->PopulateAccessibilityEvent(env, obj, event, id, eventType);
}

static void Click(JNIEnv* env, jobject obj,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id) {
  DCHECK(nativeBrowserAccessibilityManagerAndroid) << "Click";
  BrowserAccessibilityManagerAndroid* native =
      reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
  return native->Click(env, obj, id);
}

static void Focus(JNIEnv* env, jobject obj,
    jlong nativeBrowserAccessibilityManagerAndroid,
    jint id) {
  DCHECK(nativeBrowserAccessibilityManagerAndroid) << "Focus";
  BrowserAccessibilityManagerAndroid* native =
      reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
  return native->Focus(env, obj, id);
}

static void Blur(JNIEnv* env, jobject obj,
    jlong nativeBrowserAccessibilityManagerAndroid) {
  DCHECK(nativeBrowserAccessibilityManagerAndroid) << "Blur";
  BrowserAccessibilityManagerAndroid* native =
      reinterpret_cast<BrowserAccessibilityManagerAndroid*>(nativeBrowserAccessibilityManagerAndroid);
  return native->Blur(env, obj);
}

static base::subtle::AtomicWord g_BrowserAccessibilityManager_create = 0;
static ScopedJavaLocalRef<jobject>
    Java_BrowserAccessibilityManager_create(JNIEnv* env, jlong
    nativeBrowserAccessibilityManagerAndroid,
    jobject contentViewCore) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_BrowserAccessibilityManager_clazz,
      "create",

"("
"J"
"Lorg/chromium/content/browser/ContentViewCore;"
")"
"Lorg/chromium/content/browser/accessibility/BrowserAccessibilityManager;",
      &g_BrowserAccessibilityManager_create);

  jobject ret =
    env->CallStaticObjectMethod(g_BrowserAccessibilityManager_clazz,
      method_id, nativeBrowserAccessibilityManagerAndroid, contentViewCore);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_onNativeObjectDestroyed = 0;
static void Java_BrowserAccessibilityManager_onNativeObjectDestroyed(JNIEnv*
    env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "onNativeObjectDestroyed",

"("
")"
"V",
      &g_BrowserAccessibilityManager_onNativeObjectDestroyed);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_BrowserAccessibilityManager_handlePageLoaded =
    0;
static void Java_BrowserAccessibilityManager_handlePageLoaded(JNIEnv* env,
    jobject obj, jint id) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "handlePageLoaded",

"("
"I"
")"
"V",
      &g_BrowserAccessibilityManager_handlePageLoaded);

  env->CallVoidMethod(obj,
      method_id, id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_BrowserAccessibilityManager_handleFocusChanged
    = 0;
static void Java_BrowserAccessibilityManager_handleFocusChanged(JNIEnv* env,
    jobject obj, jint id) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "handleFocusChanged",

"("
"I"
")"
"V",
      &g_BrowserAccessibilityManager_handleFocusChanged);

  env->CallVoidMethod(obj,
      method_id, id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_handleCheckStateChanged = 0;
static void Java_BrowserAccessibilityManager_handleCheckStateChanged(JNIEnv*
    env, jobject obj, jint id) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "handleCheckStateChanged",

"("
"I"
")"
"V",
      &g_BrowserAccessibilityManager_handleCheckStateChanged);

  env->CallVoidMethod(obj,
      method_id, id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_handleTextSelectionChanged = 0;
static void Java_BrowserAccessibilityManager_handleTextSelectionChanged(JNIEnv*
    env, jobject obj, jint id) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "handleTextSelectionChanged",

"("
"I"
")"
"V",
      &g_BrowserAccessibilityManager_handleTextSelectionChanged);

  env->CallVoidMethod(obj,
      method_id, id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_handleEditableTextChanged = 0;
static void Java_BrowserAccessibilityManager_handleEditableTextChanged(JNIEnv*
    env, jobject obj, jint id) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "handleEditableTextChanged",

"("
"I"
")"
"V",
      &g_BrowserAccessibilityManager_handleEditableTextChanged);

  env->CallVoidMethod(obj,
      method_id, id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_handleContentChanged = 0;
static void Java_BrowserAccessibilityManager_handleContentChanged(JNIEnv* env,
    jobject obj, jint id) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "handleContentChanged",

"("
"I"
")"
"V",
      &g_BrowserAccessibilityManager_handleContentChanged);

  env->CallVoidMethod(obj,
      method_id, id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_BrowserAccessibilityManager_handleNavigate =
    0;
static void Java_BrowserAccessibilityManager_handleNavigate(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "handleNavigate",

"("
")"
"V",
      &g_BrowserAccessibilityManager_handleNavigate);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_handleScrolledToAnchor = 0;
static void Java_BrowserAccessibilityManager_handleScrolledToAnchor(JNIEnv* env,
    jobject obj, jint id) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "handleScrolledToAnchor",

"("
"I"
")"
"V",
      &g_BrowserAccessibilityManager_handleScrolledToAnchor);

  env->CallVoidMethod(obj,
      method_id, id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_announceLiveRegionText = 0;
static void Java_BrowserAccessibilityManager_announceLiveRegionText(JNIEnv* env,
    jobject obj, jstring text) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "announceLiveRegionText",

"("
"Ljava/lang/String;"
")"
"V",
      &g_BrowserAccessibilityManager_announceLiveRegionText);

  env->CallVoidMethod(obj,
      method_id, text);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoParent = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityNodeInfoParent(JNIEnv* env,
    jobject obj, jobject node,
    jint parentId) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityNodeInfoParent",

"("
"Landroid/view/accessibility/AccessibilityNodeInfo;"
"I"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityNodeInfoParent);

  env->CallVoidMethod(obj,
      method_id, node, parentId);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_addAccessibilityNodeInfoChild = 0;
static void
    Java_BrowserAccessibilityManager_addAccessibilityNodeInfoChild(JNIEnv* env,
    jobject obj, jobject node,
    jint childId) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "addAccessibilityNodeInfoChild",

"("
"Landroid/view/accessibility/AccessibilityNodeInfo;"
"I"
")"
"V",
      &g_BrowserAccessibilityManager_addAccessibilityNodeInfoChild);

  env->CallVoidMethod(obj,
      method_id, node, childId);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoBooleanAttributes = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityNodeInfoBooleanAttributes(JNIEnv*
    env, jobject obj, jobject node,
    jint virtualViewId,
    jboolean checkable,
    jboolean checked,
    jboolean clickable,
    jboolean enabled,
    jboolean focusable,
    jboolean focused,
    jboolean password,
    jboolean scrollable,
    jboolean selected,
    jboolean visibleToUser) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityNodeInfoBooleanAttributes",

"("
"Landroid/view/accessibility/AccessibilityNodeInfo;"
"I"
"Z"
"Z"
"Z"
"Z"
"Z"
"Z"
"Z"
"Z"
"Z"
"Z"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityNodeInfoBooleanAttributes);

  env->CallVoidMethod(obj,
      method_id, node, virtualViewId, checkable, checked, clickable, enabled,
          focusable, focused, password, scrollable, selected, visibleToUser);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoStringAttributes = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityNodeInfoStringAttributes(JNIEnv*
    env, jobject obj, jobject node,
    jstring className,
    jstring contentDescription) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityNodeInfoStringAttributes",

"("
"Landroid/view/accessibility/AccessibilityNodeInfo;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityNodeInfoStringAttributes);

  env->CallVoidMethod(obj,
      method_id, node, className, contentDescription);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoLocation = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityNodeInfoLocation(JNIEnv*
    env, jobject obj, jobject node,
    jint absoluteLeft,
    jint absoluteTop,
    jint parentRelativeLeft,
    jint parentRelativeTop,
    jint width,
    jint height,
    jboolean isRootNode) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityNodeInfoLocation",

"("
"Landroid/view/accessibility/AccessibilityNodeInfo;"
"I"
"I"
"I"
"I"
"I"
"I"
"Z"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityNodeInfoLocation);

  env->CallVoidMethod(obj,
      method_id, node, absoluteLeft, absoluteTop, parentRelativeLeft,
          parentRelativeTop, width, height, isRootNode);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoKitKatAttributes = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityNodeInfoKitKatAttributes(JNIEnv*
    env, jobject obj, jobject node,
    jboolean canOpenPopup,
    jboolean contentInvalid,
    jboolean dismissable,
    jboolean multiLine,
    jint inputType,
    jint liveRegion) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityNodeInfoKitKatAttributes",

"("
"Landroid/view/accessibility/AccessibilityNodeInfo;"
"Z"
"Z"
"Z"
"Z"
"I"
"I"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityNodeInfoKitKatAttributes);

  env->CallVoidMethod(obj,
      method_id, node, canOpenPopup, contentInvalid, dismissable, multiLine,
          inputType, liveRegion);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoCollectionInfo = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityNodeInfoCollectionInfo(JNIEnv*
    env, jobject obj, jobject node,
    jint rowCount,
    jint columnCount,
    jboolean hierarchical) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityNodeInfoCollectionInfo",

"("
"Landroid/view/accessibility/AccessibilityNodeInfo;"
"I"
"I"
"Z"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityNodeInfoCollectionInfo);

  env->CallVoidMethod(obj,
      method_id, node, rowCount, columnCount, hierarchical);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoCollectionItemInfo =
    0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityNodeInfoCollectionItemInfo(JNIEnv*
    env, jobject obj, jobject node,
    jint rowIndex,
    jint rowSpan,
    jint columnIndex,
    jint columnSpan,
    jboolean heading) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityNodeInfoCollectionItemInfo",

"("
"Landroid/view/accessibility/AccessibilityNodeInfo;"
"I"
"I"
"I"
"I"
"Z"
")"
"V",
&g_BrowserAccessibilityManager_setAccessibilityNodeInfoCollectionItemInfo);

  env->CallVoidMethod(obj,
      method_id, node, rowIndex, rowSpan, columnIndex, columnSpan, heading);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityNodeInfoRangeInfo = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityNodeInfoRangeInfo(JNIEnv*
    env, jobject obj, jobject node,
    jint rangeType,
    jfloat min,
    jfloat max,
    jfloat current) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityNodeInfoRangeInfo",

"("
"Landroid/view/accessibility/AccessibilityNodeInfo;"
"I"
"F"
"F"
"F"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityNodeInfoRangeInfo);

  env->CallVoidMethod(obj,
      method_id, node, rangeType, min, max, current);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventBooleanAttributes = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityEventBooleanAttributes(JNIEnv*
    env, jobject obj, jobject event,
    jboolean checked,
    jboolean enabled,
    jboolean password,
    jboolean scrollable) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityEventBooleanAttributes",

"("
"Landroid/view/accessibility/AccessibilityEvent;"
"Z"
"Z"
"Z"
"Z"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityEventBooleanAttributes);

  env->CallVoidMethod(obj,
      method_id, event, checked, enabled, password, scrollable);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventClassName = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityEventClassName(JNIEnv* env,
    jobject obj, jobject event,
    jstring className) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityEventClassName",

"("
"Landroid/view/accessibility/AccessibilityEvent;"
"Ljava/lang/String;"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityEventClassName);

  env->CallVoidMethod(obj,
      method_id, event, className);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventListAttributes = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityEventListAttributes(JNIEnv*
    env, jobject obj, jobject event,
    jint currentItemIndex,
    jint itemCount) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityEventListAttributes",

"("
"Landroid/view/accessibility/AccessibilityEvent;"
"I"
"I"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityEventListAttributes);

  env->CallVoidMethod(obj,
      method_id, event, currentItemIndex, itemCount);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventScrollAttributes = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityEventScrollAttributes(JNIEnv*
    env, jobject obj, jobject event,
    jint scrollX,
    jint scrollY,
    jint maxScrollX,
    jint maxScrollY) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityEventScrollAttributes",

"("
"Landroid/view/accessibility/AccessibilityEvent;"
"I"
"I"
"I"
"I"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityEventScrollAttributes);

  env->CallVoidMethod(obj,
      method_id, event, scrollX, scrollY, maxScrollX, maxScrollY);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventTextChangedAttrs = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityEventTextChangedAttrs(JNIEnv*
    env, jobject obj, jobject event,
    jint fromIndex,
    jint addedCount,
    jint removedCount,
    jstring beforeText,
    jstring text) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityEventTextChangedAttrs",

"("
"Landroid/view/accessibility/AccessibilityEvent;"
"I"
"I"
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityEventTextChangedAttrs);

  env->CallVoidMethod(obj,
      method_id, event, fromIndex, addedCount, removedCount, beforeText, text);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventSelectionAttrs = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityEventSelectionAttrs(JNIEnv*
    env, jobject obj, jobject event,
    jint fromIndex,
    jint addedCount,
    jint itemCount,
    jstring text) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityEventSelectionAttrs",

"("
"Landroid/view/accessibility/AccessibilityEvent;"
"I"
"I"
"I"
"Ljava/lang/String;"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityEventSelectionAttrs);

  env->CallVoidMethod(obj,
      method_id, event, fromIndex, addedCount, itemCount, text);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventKitKatAttributes = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityEventKitKatAttributes(JNIEnv*
    env, jobject obj, jobject event,
    jboolean canOpenPopup,
    jboolean contentInvalid,
    jboolean dismissable,
    jboolean multiLine,
    jint inputType,
    jint liveRegion) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityEventKitKatAttributes",

"("
"Landroid/view/accessibility/AccessibilityEvent;"
"Z"
"Z"
"Z"
"Z"
"I"
"I"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityEventKitKatAttributes);

  env->CallVoidMethod(obj,
      method_id, event, canOpenPopup, contentInvalid, dismissable, multiLine,
          inputType, liveRegion);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventCollectionInfo = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityEventCollectionInfo(JNIEnv*
    env, jobject obj, jobject event,
    jint rowCount,
    jint columnCount,
    jboolean hierarchical) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityEventCollectionInfo",

"("
"Landroid/view/accessibility/AccessibilityEvent;"
"I"
"I"
"Z"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityEventCollectionInfo);

  env->CallVoidMethod(obj,
      method_id, event, rowCount, columnCount, hierarchical);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventCollectionItemInfo = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityEventCollectionItemInfo(JNIEnv*
    env, jobject obj, jobject event,
    jint rowIndex,
    jint rowSpan,
    jint columnIndex,
    jint columnSpan,
    jboolean heading) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityEventCollectionItemInfo",

"("
"Landroid/view/accessibility/AccessibilityEvent;"
"I"
"I"
"I"
"I"
"Z"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityEventCollectionItemInfo);

  env->CallVoidMethod(obj,
      method_id, event, rowIndex, rowSpan, columnIndex, columnSpan, heading);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_BrowserAccessibilityManager_setAccessibilityEventRangeInfo = 0;
static void
    Java_BrowserAccessibilityManager_setAccessibilityEventRangeInfo(JNIEnv* env,
    jobject obj, jobject event,
    jint rangeType,
    jfloat min,
    jfloat max,
    jfloat current) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BrowserAccessibilityManager_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BrowserAccessibilityManager_clazz,
      "setAccessibilityEventRangeInfo",

"("
"Landroid/view/accessibility/AccessibilityEvent;"
"I"
"F"
"F"
"F"
")"
"V",
      &g_BrowserAccessibilityManager_setAccessibilityEventRangeInfo);

  env->CallVoidMethod(obj,
      method_id, event, rangeType, min, max, current);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_BrowserAccessibilityManager_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kBrowserAccessibilityManagerClassPath).obj()));
  static const JNINativeMethod kMethodsBrowserAccessibilityManager[] = {
    { "nativeGetRootId",
"("
"J"
")"
"I", reinterpret_cast<void*>(GetRootId) },
    { "nativeIsNodeValid",
"("
"J"
"I"
")"
"Z", reinterpret_cast<void*>(IsNodeValid) },
    { "nativeHitTest",
"("
"J"
"I"
"I"
")"
"I", reinterpret_cast<void*>(HitTest) },
    { "nativePopulateAccessibilityNodeInfo",
"("
"J"
"Landroid/view/accessibility/AccessibilityNodeInfo;"
"I"
")"
"Z", reinterpret_cast<void*>(PopulateAccessibilityNodeInfo) },
    { "nativePopulateAccessibilityEvent",
"("
"J"
"Landroid/view/accessibility/AccessibilityEvent;"
"I"
"I"
")"
"Z", reinterpret_cast<void*>(PopulateAccessibilityEvent) },
    { "nativeClick",
"("
"J"
"I"
")"
"V", reinterpret_cast<void*>(Click) },
    { "nativeFocus",
"("
"J"
"I"
")"
"V", reinterpret_cast<void*>(Focus) },
    { "nativeBlur",
"("
"J"
")"
"V", reinterpret_cast<void*>(Blur) },
  };
  const int kMethodsBrowserAccessibilityManagerSize =
      arraysize(kMethodsBrowserAccessibilityManager);

  if (env->RegisterNatives(g_BrowserAccessibilityManager_clazz,
                           kMethodsBrowserAccessibilityManager,
                           kMethodsBrowserAccessibilityManagerSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_chromium_content_browser_accessibility_BrowserAccessibilityManager_JNI
