// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/VibrationProvider

#ifndef org_chromium_content_browser_VibrationProvider_JNI
#define org_chromium_content_browser_VibrationProvider_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kVibrationProviderClassPath[] =
    "org/chromium/content/browser/VibrationProvider";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_VibrationProvider_clazz = NULL;
}  // namespace

namespace content {

// Step 2: method stubs.

static base::subtle::AtomicWord g_VibrationProvider_create = 0;
static ScopedJavaLocalRef<jobject> Java_VibrationProvider_create(JNIEnv* env,
    jobject context) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_VibrationProvider_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_VibrationProvider_clazz,
      "create",

"("
"Landroid/content/Context;"
")"
"Lorg/chromium/content/browser/VibrationProvider;",
      &g_VibrationProvider_create);

  jobject ret =
    env->CallStaticObjectMethod(g_VibrationProvider_clazz,
      method_id, context);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_VibrationProvider_vibrate = 0;
static void Java_VibrationProvider_vibrate(JNIEnv* env, jobject obj, jlong
    milliseconds) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_VibrationProvider_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_VibrationProvider_clazz,
      "vibrate",

"("
"J"
")"
"V",
      &g_VibrationProvider_vibrate);

  env->CallVoidMethod(obj,
      method_id, milliseconds);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_VibrationProvider_cancelVibration = 0;
static void Java_VibrationProvider_cancelVibration(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_VibrationProvider_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_VibrationProvider_clazz,
      "cancelVibration",

"("
")"
"V",
      &g_VibrationProvider_cancelVibration);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_VibrationProvider_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kVibrationProviderClassPath).obj()));
  return true;
}
}  // namespace content

#endif  // org_chromium_content_browser_VibrationProvider_JNI
