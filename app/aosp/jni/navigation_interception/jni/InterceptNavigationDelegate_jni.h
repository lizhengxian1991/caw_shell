// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//
//    org/chromium/components/navigation_interception/InterceptNavigationDelegate

#ifndef org_chromium_components_navigation_interception_InterceptNavigationDelegate_JNI
#define org_chromium_components_navigation_interception_InterceptNavigationDelegate_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kInterceptNavigationDelegateClassPath[] =
    "org/chromium/components/navigation_interception/InterceptNavigationDelegate";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_InterceptNavigationDelegate_clazz = NULL;
}  // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_InterceptNavigationDelegate_shouldIgnoreNavigation = 0;
static jboolean Java_InterceptNavigationDelegate_shouldIgnoreNavigation(JNIEnv*
    env, jobject obj, jobject navigationParams) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_InterceptNavigationDelegate_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_InterceptNavigationDelegate_clazz,
      "shouldIgnoreNavigation",

"("
"Lorg/chromium/components/navigation_interception/NavigationParams;"
")"
"Z",
      &g_InterceptNavigationDelegate_shouldIgnoreNavigation);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id, navigationParams);
  base::android::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_InterceptNavigationDelegate_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kInterceptNavigationDelegateClassPath).obj()));
  return true;
}

#endif  // org_chromium_components_navigation_interception_InterceptNavigationDelegate_JNI
