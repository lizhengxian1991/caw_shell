// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/WebAudioMediaCodecBridge

#ifndef org_chromium_media_WebAudioMediaCodecBridge_JNI
#define org_chromium_media_WebAudioMediaCodecBridge_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kWebAudioMediaCodecBridgeClassPath[] =
    "org/chromium/media/WebAudioMediaCodecBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_WebAudioMediaCodecBridge_clazz = NULL;
}  // namespace

namespace media {

// Step 2: method stubs.
static void OnChunkDecoded(JNIEnv* env, jobject obj,
    jlong nativeWebAudioMediaCodecBridge,
    jobject buf,
    jint size,
    jint inputChannelCount,
    jint outputChannelCount) {
  DCHECK(nativeWebAudioMediaCodecBridge) << "OnChunkDecoded";
  WebAudioMediaCodecBridge* native =
      reinterpret_cast<WebAudioMediaCodecBridge*>(nativeWebAudioMediaCodecBridge);
  return native->OnChunkDecoded(env, obj, buf, size, inputChannelCount,
      outputChannelCount);
}

static void InitializeDestination(JNIEnv* env, jobject obj,
    jlong nativeWebAudioMediaCodecBridge,
    jint inputChannelCount,
    jint sampleRate,
    jlong durationMicroseconds) {
  DCHECK(nativeWebAudioMediaCodecBridge) << "InitializeDestination";
  WebAudioMediaCodecBridge* native =
      reinterpret_cast<WebAudioMediaCodecBridge*>(nativeWebAudioMediaCodecBridge);
  return native->InitializeDestination(env, obj, inputChannelCount, sampleRate,
      durationMicroseconds);
}

static base::subtle::AtomicWord g_WebAudioMediaCodecBridge_CreateTempFile = 0;
static ScopedJavaLocalRef<jstring>
    Java_WebAudioMediaCodecBridge_CreateTempFile(JNIEnv* env, jobject ctx) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebAudioMediaCodecBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_WebAudioMediaCodecBridge_clazz,
      "CreateTempFile",

"("
"Landroid/content/Context;"
")"
"Ljava/lang/String;",
      &g_WebAudioMediaCodecBridge_CreateTempFile);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(g_WebAudioMediaCodecBridge_clazz,
      method_id, ctx));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_WebAudioMediaCodecBridge_decodeAudioFile = 0;
static jboolean Java_WebAudioMediaCodecBridge_decodeAudioFile(JNIEnv* env,
    jobject ctx,
    jlong nativeMediaCodecBridge,
    jint inputFD,
    jlong dataSize) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebAudioMediaCodecBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_WebAudioMediaCodecBridge_clazz,
      "decodeAudioFile",

"("
"Landroid/content/Context;"
"J"
"I"
"J"
")"
"Z",
      &g_WebAudioMediaCodecBridge_decodeAudioFile);

  jboolean ret =
    env->CallStaticBooleanMethod(g_WebAudioMediaCodecBridge_clazz,
      method_id, ctx, nativeMediaCodecBridge, inputFD, dataSize);
  base::android::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_WebAudioMediaCodecBridge_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kWebAudioMediaCodecBridgeClassPath).obj()));
  static const JNINativeMethod kMethodsWebAudioMediaCodecBridge[] = {
    { "nativeOnChunkDecoded",
"("
"J"
"Ljava/nio/ByteBuffer;"
"I"
"I"
"I"
")"
"V", reinterpret_cast<void*>(OnChunkDecoded) },
    { "nativeInitializeDestination",
"("
"J"
"I"
"I"
"J"
")"
"V", reinterpret_cast<void*>(InitializeDestination) },
  };
  const int kMethodsWebAudioMediaCodecBridgeSize =
      arraysize(kMethodsWebAudioMediaCodecBridge);

  if (env->RegisterNatives(g_WebAudioMediaCodecBridge_clazz,
                           kMethodsWebAudioMediaCodecBridge,
                           kMethodsWebAudioMediaCodecBridgeSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace media

#endif  // org_chromium_media_WebAudioMediaCodecBridge_JNI
