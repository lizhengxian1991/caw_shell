// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/VideoCapture

#ifndef org_chromium_media_VideoCapture_JNI
#define org_chromium_media_VideoCapture_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kVideoCaptureClassPath[] =
    "org/chromium/media/VideoCapture";
const char kChromiumCameraInfoClassPath[] =
    "org/chromium/media/VideoCapture$ChromiumCameraInfo";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_VideoCapture_clazz = NULL;
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ChromiumCameraInfo_clazz = NULL;
}  // namespace

namespace media {

// Step 2: method stubs.
static void OnFrameAvailable(JNIEnv* env, jobject obj,
    jlong nativeVideoCaptureDeviceAndroid,
    jbyteArray data,
    jint length,
    jint rotation) {
  DCHECK(nativeVideoCaptureDeviceAndroid) << "OnFrameAvailable";
  VideoCaptureDeviceAndroid* native =
      reinterpret_cast<VideoCaptureDeviceAndroid*>(nativeVideoCaptureDeviceAndroid);
  return native->OnFrameAvailable(env, obj, data, length, rotation);
}

static base::subtle::AtomicWord g_VideoCapture_createVideoCapture = 0;
static ScopedJavaLocalRef<jobject> Java_VideoCapture_createVideoCapture(JNIEnv*
    env, jobject context,
    jint id,
    jlong nativeVideoCaptureDeviceAndroid) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_VideoCapture_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_VideoCapture_clazz,
      "createVideoCapture",

"("
"Landroid/content/Context;"
"I"
"J"
")"
"Lorg/chromium/media/VideoCapture;",
      &g_VideoCapture_createVideoCapture);

  jobject ret =
    env->CallStaticObjectMethod(g_VideoCapture_clazz,
      method_id, context, id, nativeVideoCaptureDeviceAndroid);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_VideoCapture_allocate = 0;
static jboolean Java_VideoCapture_allocate(JNIEnv* env, jobject obj, jint width,
    jint height,
    jint frameRate) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_VideoCapture_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_VideoCapture_clazz,
      "allocate",

"("
"I"
"I"
"I"
")"
"Z",
      &g_VideoCapture_allocate);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id, width, height, frameRate);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_VideoCapture_queryWidth = 0;
static jint Java_VideoCapture_queryWidth(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_VideoCapture_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_VideoCapture_clazz,
      "queryWidth",

"("
")"
"I",
      &g_VideoCapture_queryWidth);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_VideoCapture_queryHeight = 0;
static jint Java_VideoCapture_queryHeight(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_VideoCapture_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_VideoCapture_clazz,
      "queryHeight",

"("
")"
"I",
      &g_VideoCapture_queryHeight);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_VideoCapture_queryFrameRate = 0;
static jint Java_VideoCapture_queryFrameRate(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_VideoCapture_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_VideoCapture_clazz,
      "queryFrameRate",

"("
")"
"I",
      &g_VideoCapture_queryFrameRate);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_VideoCapture_getColorspace = 0;
static jint Java_VideoCapture_getColorspace(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_VideoCapture_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_VideoCapture_clazz,
      "getColorspace",

"("
")"
"I",
      &g_VideoCapture_getColorspace);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_VideoCapture_startCapture = 0;
static jint Java_VideoCapture_startCapture(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_VideoCapture_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_VideoCapture_clazz,
      "startCapture",

"("
")"
"I",
      &g_VideoCapture_startCapture);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_VideoCapture_stopCapture = 0;
static jint Java_VideoCapture_stopCapture(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_VideoCapture_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_VideoCapture_clazz,
      "stopCapture",

"("
")"
"I",
      &g_VideoCapture_stopCapture);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_VideoCapture_deallocate = 0;
static void Java_VideoCapture_deallocate(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_VideoCapture_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_VideoCapture_clazz,
      "deallocate",

"("
")"
"V",
      &g_VideoCapture_deallocate);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ChromiumCameraInfo_getNumberOfCameras = 0;
static jint Java_ChromiumCameraInfo_getNumberOfCameras(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ChromiumCameraInfo_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ChromiumCameraInfo_clazz,
      "getNumberOfCameras",

"("
")"
"I",
      &g_ChromiumCameraInfo_getNumberOfCameras);

  jint ret =
    env->CallStaticIntMethod(g_ChromiumCameraInfo_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ChromiumCameraInfo_getAt = 0;
static ScopedJavaLocalRef<jobject> Java_ChromiumCameraInfo_getAt(JNIEnv* env,
    jint index) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ChromiumCameraInfo_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ChromiumCameraInfo_clazz,
      "getAt",

"("
"I"
")"
"Lorg/chromium/media/VideoCapture$ChromiumCameraInfo;",
      &g_ChromiumCameraInfo_getAt);

  jobject ret =
    env->CallStaticObjectMethod(g_ChromiumCameraInfo_clazz,
      method_id, index);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ChromiumCameraInfo_getId = 0;
static jint Java_ChromiumCameraInfo_getId(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ChromiumCameraInfo_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ChromiumCameraInfo_clazz,
      "getId",

"("
")"
"I",
      &g_ChromiumCameraInfo_getId);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ChromiumCameraInfo_getDeviceName = 0;
static ScopedJavaLocalRef<jstring> Java_ChromiumCameraInfo_getDeviceName(JNIEnv*
    env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ChromiumCameraInfo_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ChromiumCameraInfo_clazz,
      "getDeviceName",

"("
")"
"Ljava/lang/String;",
      &g_ChromiumCameraInfo_getDeviceName);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_ChromiumCameraInfo_getOrientation = 0;
static jint Java_ChromiumCameraInfo_getOrientation(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ChromiumCameraInfo_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ChromiumCameraInfo_clazz,
      "getOrientation",

"("
")"
"I",
      &g_ChromiumCameraInfo_getOrientation);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_VideoCapture_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kVideoCaptureClassPath).obj()));
  g_ChromiumCameraInfo_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kChromiumCameraInfoClassPath).obj()));
  static const JNINativeMethod kMethodsVideoCapture[] = {
    { "nativeOnFrameAvailable",
"("
"J"
"[B"
"I"
"I"
")"
"V", reinterpret_cast<void*>(OnFrameAvailable) },
  };
  const int kMethodsVideoCaptureSize = arraysize(kMethodsVideoCapture);

  if (env->RegisterNatives(g_VideoCapture_clazz,
                           kMethodsVideoCapture,
                           kMethodsVideoCaptureSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace media

#endif  // org_chromium_media_VideoCapture_JNI
