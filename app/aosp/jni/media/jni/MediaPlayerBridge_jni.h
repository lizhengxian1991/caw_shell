// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/MediaPlayerBridge

#ifndef org_chromium_media_MediaPlayerBridge_JNI
#define org_chromium_media_MediaPlayerBridge_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kAllowedOperationsClassPath[] =
    "org/chromium/media/MediaPlayerBridge$AllowedOperations";
const char kMediaPlayerBridgeClassPath[] =
    "org/chromium/media/MediaPlayerBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_AllowedOperations_clazz = NULL;
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_MediaPlayerBridge_clazz = NULL;
}  // namespace

namespace media {

// Step 2: method stubs.
static void OnDidSetDataUriDataSource(JNIEnv* env, jobject obj,
    jlong nativeMediaPlayerBridge,
    jboolean success) {
  DCHECK(nativeMediaPlayerBridge) << "OnDidSetDataUriDataSource";
  MediaPlayerBridge* native =
      reinterpret_cast<MediaPlayerBridge*>(nativeMediaPlayerBridge);
  return native->OnDidSetDataUriDataSource(env, obj, success);
}

static base::subtle::AtomicWord g_MediaPlayerBridge_create = 0;
static ScopedJavaLocalRef<jobject> Java_MediaPlayerBridge_create(JNIEnv* env,
    jlong nativeMediaPlayerBridge) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_MediaPlayerBridge_clazz,
      "create",

"("
"J"
")"
"Lorg/chromium/media/MediaPlayerBridge;",
      &g_MediaPlayerBridge_create);

  jobject ret =
    env->CallStaticObjectMethod(g_MediaPlayerBridge_clazz,
      method_id, nativeMediaPlayerBridge);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_MediaPlayerBridge_destroy = 0;
static void Java_MediaPlayerBridge_destroy(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaPlayerBridge_clazz,
      "destroy",

"("
")"
"V",
      &g_MediaPlayerBridge_destroy);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaPlayerBridge_setSurface = 0;
static void Java_MediaPlayerBridge_setSurface(JNIEnv* env, jobject obj, jobject
    surface) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaPlayerBridge_clazz,
      "setSurface",

"("
"Landroid/view/Surface;"
")"
"V",
      &g_MediaPlayerBridge_setSurface);

  env->CallVoidMethod(obj,
      method_id, surface);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaPlayerBridge_prepareAsync = 0;
static jboolean Java_MediaPlayerBridge_prepareAsync(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaPlayerBridge_clazz,
      "prepareAsync",

"("
")"
"Z",
      &g_MediaPlayerBridge_prepareAsync);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerBridge_isPlaying = 0;
static jboolean Java_MediaPlayerBridge_isPlaying(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaPlayerBridge_clazz,
      "isPlaying",

"("
")"
"Z",
      &g_MediaPlayerBridge_isPlaying);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerBridge_getVideoWidth = 0;
static jint Java_MediaPlayerBridge_getVideoWidth(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaPlayerBridge_clazz,
      "getVideoWidth",

"("
")"
"I",
      &g_MediaPlayerBridge_getVideoWidth);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerBridge_getVideoHeight = 0;
static jint Java_MediaPlayerBridge_getVideoHeight(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaPlayerBridge_clazz,
      "getVideoHeight",

"("
")"
"I",
      &g_MediaPlayerBridge_getVideoHeight);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerBridge_getCurrentPosition = 0;
static jint Java_MediaPlayerBridge_getCurrentPosition(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaPlayerBridge_clazz,
      "getCurrentPosition",

"("
")"
"I",
      &g_MediaPlayerBridge_getCurrentPosition);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerBridge_getDuration = 0;
static jint Java_MediaPlayerBridge_getDuration(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaPlayerBridge_clazz,
      "getDuration",

"("
")"
"I",
      &g_MediaPlayerBridge_getDuration);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerBridge_release = 0;
static void Java_MediaPlayerBridge_release(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaPlayerBridge_clazz,
      "release",

"("
")"
"V",
      &g_MediaPlayerBridge_release);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaPlayerBridge_setVolume = 0;
static void Java_MediaPlayerBridge_setVolume(JNIEnv* env, jobject obj, jdouble
    volume) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaPlayerBridge_clazz,
      "setVolume",

"("
"D"
")"
"V",
      &g_MediaPlayerBridge_setVolume);

  env->CallVoidMethod(obj,
      method_id, volume);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaPlayerBridge_start = 0;
static void Java_MediaPlayerBridge_start(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaPlayerBridge_clazz,
      "start",

"("
")"
"V",
      &g_MediaPlayerBridge_start);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaPlayerBridge_pause = 0;
static void Java_MediaPlayerBridge_pause(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaPlayerBridge_clazz,
      "pause",

"("
")"
"V",
      &g_MediaPlayerBridge_pause);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaPlayerBridge_seekTo = 0;
static void Java_MediaPlayerBridge_seekTo(JNIEnv* env, jobject obj, jint msec) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaPlayerBridge_clazz,
      "seekTo",

"("
"I"
")"
"V",
      &g_MediaPlayerBridge_seekTo);

  env->CallVoidMethod(obj,
      method_id, msec);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaPlayerBridge_setDataSource = 0;
static jboolean Java_MediaPlayerBridge_setDataSource(JNIEnv* env, jobject obj,
    jobject context,
    jstring url,
    jstring cookies,
    jboolean hideUrlLog) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaPlayerBridge_clazz,
      "setDataSource",

"("
"Landroid/content/Context;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
")"
"Z",
      &g_MediaPlayerBridge_setDataSource);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id, context, url, cookies, hideUrlLog);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerBridge_setDataUriDataSource = 0;
static jboolean Java_MediaPlayerBridge_setDataUriDataSource(JNIEnv* env, jobject
    obj, jobject context,
    jstring url) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaPlayerBridge_clazz,
      "setDataUriDataSource",

"("
"Landroid/content/Context;"
"Ljava/lang/String;"
")"
"Z",
      &g_MediaPlayerBridge_setDataUriDataSource);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id, context, url);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AllowedOperations_canPause = 0;
static jboolean Java_AllowedOperations_canPause(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AllowedOperations_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AllowedOperations_clazz,
      "canPause",

"("
")"
"Z",
      &g_AllowedOperations_canPause);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AllowedOperations_canSeekForward = 0;
static jboolean Java_AllowedOperations_canSeekForward(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AllowedOperations_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AllowedOperations_clazz,
      "canSeekForward",

"("
")"
"Z",
      &g_AllowedOperations_canSeekForward);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AllowedOperations_canSeekBackward = 0;
static jboolean Java_AllowedOperations_canSeekBackward(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AllowedOperations_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AllowedOperations_clazz,
      "canSeekBackward",

"("
")"
"Z",
      &g_AllowedOperations_canSeekBackward);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerBridge_getAllowedOperations = 0;
static ScopedJavaLocalRef<jobject>
    Java_MediaPlayerBridge_getAllowedOperations(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaPlayerBridge_clazz,
      "getAllowedOperations",

"("
")"
"Lorg/chromium/media/MediaPlayerBridge$AllowedOperations;",
      &g_MediaPlayerBridge_getAllowedOperations);

  jobject ret =
    env->CallObjectMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_AllowedOperations_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kAllowedOperationsClassPath).obj()));
  g_MediaPlayerBridge_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kMediaPlayerBridgeClassPath).obj()));
  static const JNINativeMethod kMethodsMediaPlayerBridge[] = {
    { "nativeOnDidSetDataUriDataSource",
"("
"J"
"Z"
")"
"V", reinterpret_cast<void*>(OnDidSetDataUriDataSource) },
  };
  const int kMethodsMediaPlayerBridgeSize =
      arraysize(kMethodsMediaPlayerBridge);

  if (env->RegisterNatives(g_MediaPlayerBridge_clazz,
                           kMethodsMediaPlayerBridge,
                           kMethodsMediaPlayerBridgeSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace media

#endif  // org_chromium_media_MediaPlayerBridge_JNI
