// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/MediaDrmBridge

#ifndef org_chromium_media_MediaDrmBridge_JNI
#define org_chromium_media_MediaDrmBridge_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kMediaDrmBridgeClassPath[] =
    "org/chromium/media/MediaDrmBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_MediaDrmBridge_clazz = NULL;
}  // namespace

namespace media {

// Step 2: method stubs.
static void OnMediaCryptoReady(JNIEnv* env, jobject obj,
    jlong nativeMediaDrmBridge) {
  DCHECK(nativeMediaDrmBridge) << "OnMediaCryptoReady";
  MediaDrmBridge* native =
      reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  return native->OnMediaCryptoReady(env, obj);
}

static void OnSessionCreated(JNIEnv* env, jobject obj,
    jlong nativeMediaDrmBridge,
    jint sessionId,
    jstring webSessionId) {
  DCHECK(nativeMediaDrmBridge) << "OnSessionCreated";
  MediaDrmBridge* native =
      reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  return native->OnSessionCreated(env, obj, sessionId, webSessionId);
}

static void OnSessionMessage(JNIEnv* env, jobject obj,
    jlong nativeMediaDrmBridge,
    jint sessionId,
    jbyteArray message,
    jstring destinationUrl) {
  DCHECK(nativeMediaDrmBridge) << "OnSessionMessage";
  MediaDrmBridge* native =
      reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  return native->OnSessionMessage(env, obj, sessionId, message, destinationUrl);
}

static void OnSessionReady(JNIEnv* env, jobject obj,
    jlong nativeMediaDrmBridge,
    jint sessionId) {
  DCHECK(nativeMediaDrmBridge) << "OnSessionReady";
  MediaDrmBridge* native =
      reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  return native->OnSessionReady(env, obj, sessionId);
}

static void OnSessionClosed(JNIEnv* env, jobject obj,
    jlong nativeMediaDrmBridge,
    jint sessionId) {
  DCHECK(nativeMediaDrmBridge) << "OnSessionClosed";
  MediaDrmBridge* native =
      reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  return native->OnSessionClosed(env, obj, sessionId);
}

static void OnSessionError(JNIEnv* env, jobject obj,
    jlong nativeMediaDrmBridge,
    jint sessionId) {
  DCHECK(nativeMediaDrmBridge) << "OnSessionError";
  MediaDrmBridge* native =
      reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  return native->OnSessionError(env, obj, sessionId);
}

static void OnResetDeviceCredentialsCompleted(JNIEnv* env, jobject obj,
    jlong nativeMediaDrmBridge,
    jboolean success) {
  DCHECK(nativeMediaDrmBridge) << "OnResetDeviceCredentialsCompleted";
  MediaDrmBridge* native =
      reinterpret_cast<MediaDrmBridge*>(nativeMediaDrmBridge);
  return native->OnResetDeviceCredentialsCompleted(env, obj, success);
}

static base::subtle::AtomicWord g_MediaDrmBridge_isCryptoSchemeSupported = 0;
static jboolean Java_MediaDrmBridge_isCryptoSchemeSupported(JNIEnv* env,
    jbyteArray schemeUUID,
    jstring containerMimeType) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaDrmBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_MediaDrmBridge_clazz,
      "isCryptoSchemeSupported",

"("
"[B"
"Ljava/lang/String;"
")"
"Z",
      &g_MediaDrmBridge_isCryptoSchemeSupported);

  jboolean ret =
    env->CallStaticBooleanMethod(g_MediaDrmBridge_clazz,
      method_id, schemeUUID, containerMimeType);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaDrmBridge_create = 0;
static ScopedJavaLocalRef<jobject> Java_MediaDrmBridge_create(JNIEnv* env,
    jbyteArray schemeUUID,
    jstring securityLevel,
    jint nativeMediaDrmBridge) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaDrmBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_MediaDrmBridge_clazz,
      "create",

"("
"[B"
"Ljava/lang/String;"
"I"
")"
"Lorg/chromium/media/MediaDrmBridge;",
      &g_MediaDrmBridge_create);

  jobject ret =
    env->CallStaticObjectMethod(g_MediaDrmBridge_clazz,
      method_id, schemeUUID, securityLevel, nativeMediaDrmBridge);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_MediaDrmBridge_getMediaCrypto = 0;
static ScopedJavaLocalRef<jobject> Java_MediaDrmBridge_getMediaCrypto(JNIEnv*
    env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaDrmBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaDrmBridge_clazz,
      "getMediaCrypto",

"("
")"
"Landroid/media/MediaCrypto;",
      &g_MediaDrmBridge_getMediaCrypto);

  jobject ret =
    env->CallObjectMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_MediaDrmBridge_resetDeviceCredentials = 0;
static void Java_MediaDrmBridge_resetDeviceCredentials(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaDrmBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaDrmBridge_clazz,
      "resetDeviceCredentials",

"("
")"
"V",
      &g_MediaDrmBridge_resetDeviceCredentials);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaDrmBridge_release = 0;
static void Java_MediaDrmBridge_release(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaDrmBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaDrmBridge_clazz,
      "release",

"("
")"
"V",
      &g_MediaDrmBridge_release);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaDrmBridge_createSession = 0;
static void Java_MediaDrmBridge_createSession(JNIEnv* env, jobject obj, jint
    sessionId,
    jbyteArray initData,
    jstring mime) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaDrmBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaDrmBridge_clazz,
      "createSession",

"("
"I"
"[B"
"Ljava/lang/String;"
")"
"V",
      &g_MediaDrmBridge_createSession);

  env->CallVoidMethod(obj,
      method_id, sessionId, initData, mime);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaDrmBridge_releaseSession = 0;
static void Java_MediaDrmBridge_releaseSession(JNIEnv* env, jobject obj, jint
    sessionId) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaDrmBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaDrmBridge_clazz,
      "releaseSession",

"("
"I"
")"
"V",
      &g_MediaDrmBridge_releaseSession);

  env->CallVoidMethod(obj,
      method_id, sessionId);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaDrmBridge_updateSession = 0;
static void Java_MediaDrmBridge_updateSession(JNIEnv* env, jobject obj, jint
    sessionId,
    jbyteArray key) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaDrmBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaDrmBridge_clazz,
      "updateSession",

"("
"I"
"[B"
")"
"V",
      &g_MediaDrmBridge_updateSession);

  env->CallVoidMethod(obj,
      method_id, sessionId, key);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaDrmBridge_getSecurityLevel = 0;
static ScopedJavaLocalRef<jstring> Java_MediaDrmBridge_getSecurityLevel(JNIEnv*
    env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaDrmBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaDrmBridge_clazz,
      "getSecurityLevel",

"("
")"
"Ljava/lang/String;",
      &g_MediaDrmBridge_getSecurityLevel);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_MediaDrmBridge_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kMediaDrmBridgeClassPath).obj()));
  static const JNINativeMethod kMethodsMediaDrmBridge[] = {
    { "nativeOnMediaCryptoReady",
"("
"J"
")"
"V", reinterpret_cast<void*>(OnMediaCryptoReady) },
    { "nativeOnSessionCreated",
"("
"J"
"I"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(OnSessionCreated) },
    { "nativeOnSessionMessage",
"("
"J"
"I"
"[B"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(OnSessionMessage) },
    { "nativeOnSessionReady",
"("
"J"
"I"
")"
"V", reinterpret_cast<void*>(OnSessionReady) },
    { "nativeOnSessionClosed",
"("
"J"
"I"
")"
"V", reinterpret_cast<void*>(OnSessionClosed) },
    { "nativeOnSessionError",
"("
"J"
"I"
")"
"V", reinterpret_cast<void*>(OnSessionError) },
    { "nativeOnResetDeviceCredentialsCompleted",
"("
"J"
"Z"
")"
"V", reinterpret_cast<void*>(OnResetDeviceCredentialsCompleted) },
  };
  const int kMethodsMediaDrmBridgeSize = arraysize(kMethodsMediaDrmBridge);

  if (env->RegisterNatives(g_MediaDrmBridge_clazz,
                           kMethodsMediaDrmBridge,
                           kMethodsMediaDrmBridgeSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace media

#endif  // org_chromium_media_MediaDrmBridge_JNI
