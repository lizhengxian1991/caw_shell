// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/AudioManagerAndroid

#ifndef org_chromium_media_AudioManagerAndroid_JNI
#define org_chromium_media_AudioManagerAndroid_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kAudioDeviceNameClassPath[] =
    "org/chromium/media/AudioManagerAndroid$AudioDeviceName";
const char kAudioManagerAndroidClassPath[] =
    "org/chromium/media/AudioManagerAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_AudioDeviceName_clazz = NULL;
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_AudioManagerAndroid_clazz = NULL;
}  // namespace

namespace media {

// Step 2: method stubs.
static void SetMute(JNIEnv* env, jobject obj,
    jlong nativeAudioManagerAndroid,
    jboolean muted) {
  DCHECK(nativeAudioManagerAndroid) << "SetMute";
  AudioManagerAndroid* native =
      reinterpret_cast<AudioManagerAndroid*>(nativeAudioManagerAndroid);
  return native->SetMute(env, obj, muted);
}

static base::subtle::AtomicWord g_AudioDeviceName_id = 0;
static ScopedJavaLocalRef<jstring> Java_AudioDeviceName_id(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioDeviceName_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AudioDeviceName_clazz,
      "id",

"("
")"
"Ljava/lang/String;",
      &g_AudioDeviceName_id);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AudioDeviceName_name = 0;
static ScopedJavaLocalRef<jstring> Java_AudioDeviceName_name(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioDeviceName_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AudioDeviceName_clazz,
      "name",

"("
")"
"Ljava/lang/String;",
      &g_AudioDeviceName_name);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_AudioManagerAndroid_createAudioManagerAndroid
    = 0;
static ScopedJavaLocalRef<jobject>
    Java_AudioManagerAndroid_createAudioManagerAndroid(JNIEnv* env, jobject
    context,
    jlong nativeAudioManagerAndroid) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioManagerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AudioManagerAndroid_clazz,
      "createAudioManagerAndroid",

"("
"Landroid/content/Context;"
"J"
")"
"Lorg/chromium/media/AudioManagerAndroid;",
      &g_AudioManagerAndroid_createAudioManagerAndroid);

  jobject ret =
    env->CallStaticObjectMethod(g_AudioManagerAndroid_clazz,
      method_id, context, nativeAudioManagerAndroid);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_AudioManagerAndroid_init = 0;
static void Java_AudioManagerAndroid_init(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioManagerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AudioManagerAndroid_clazz,
      "init",

"("
")"
"V",
      &g_AudioManagerAndroid_init);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_AudioManagerAndroid_close = 0;
static void Java_AudioManagerAndroid_close(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioManagerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AudioManagerAndroid_clazz,
      "close",

"("
")"
"V",
      &g_AudioManagerAndroid_close);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_AudioManagerAndroid_setMode = 0;
static void Java_AudioManagerAndroid_setMode(JNIEnv* env, jobject obj, jint
    mode) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioManagerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AudioManagerAndroid_clazz,
      "setMode",

"("
"I"
")"
"V",
      &g_AudioManagerAndroid_setMode);

  env->CallVoidMethod(obj,
      method_id, mode);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_AudioManagerAndroid_setDevice = 0;
static void Java_AudioManagerAndroid_setDevice(JNIEnv* env, jobject obj, jstring
    deviceId) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioManagerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AudioManagerAndroid_clazz,
      "setDevice",

"("
"Ljava/lang/String;"
")"
"V",
      &g_AudioManagerAndroid_setDevice);

  env->CallVoidMethod(obj,
      method_id, deviceId);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_AudioManagerAndroid_getAudioInputDeviceNames =
    0;
static ScopedJavaLocalRef<jobjectArray>
    Java_AudioManagerAndroid_getAudioInputDeviceNames(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioManagerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AudioManagerAndroid_clazz,
      "getAudioInputDeviceNames",

"("
")"
"[Lorg/chromium/media/AudioManagerAndroid$AudioDeviceName;",
      &g_AudioManagerAndroid_getAudioInputDeviceNames);

  jobjectArray ret =
    static_cast<jobjectArray>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static base::subtle::AtomicWord g_AudioManagerAndroid_getNativeOutputSampleRate
    = 0;
static jint Java_AudioManagerAndroid_getNativeOutputSampleRate(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioManagerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AudioManagerAndroid_clazz,
      "getNativeOutputSampleRate",

"("
")"
"I",
      &g_AudioManagerAndroid_getNativeOutputSampleRate);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AudioManagerAndroid_getMinInputFrameSize = 0;
static jint Java_AudioManagerAndroid_getMinInputFrameSize(JNIEnv* env, jint
    sampleRate,
    jint channels) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioManagerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AudioManagerAndroid_clazz,
      "getMinInputFrameSize",

"("
"I"
"I"
")"
"I",
      &g_AudioManagerAndroid_getMinInputFrameSize);

  jint ret =
    env->CallStaticIntMethod(g_AudioManagerAndroid_clazz,
      method_id, sampleRate, channels);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AudioManagerAndroid_getMinOutputFrameSize = 0;
static jint Java_AudioManagerAndroid_getMinOutputFrameSize(JNIEnv* env, jint
    sampleRate,
    jint channels) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioManagerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AudioManagerAndroid_clazz,
      "getMinOutputFrameSize",

"("
"I"
"I"
")"
"I",
      &g_AudioManagerAndroid_getMinOutputFrameSize);

  jint ret =
    env->CallStaticIntMethod(g_AudioManagerAndroid_clazz,
      method_id, sampleRate, channels);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AudioManagerAndroid_isAudioLowLatencySupported
    = 0;
static jboolean Java_AudioManagerAndroid_isAudioLowLatencySupported(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioManagerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AudioManagerAndroid_clazz,
      "isAudioLowLatencySupported",

"("
")"
"Z",
      &g_AudioManagerAndroid_isAudioLowLatencySupported);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_AudioManagerAndroid_getAudioLowLatencyOutputFrameSize = 0;
static jint Java_AudioManagerAndroid_getAudioLowLatencyOutputFrameSize(JNIEnv*
    env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioManagerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AudioManagerAndroid_clazz,
      "getAudioLowLatencyOutputFrameSize",

"("
")"
"I",
      &g_AudioManagerAndroid_getAudioLowLatencyOutputFrameSize);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_AudioManagerAndroid_shouldUseAcousticEchoCanceler = 0;
static jboolean Java_AudioManagerAndroid_shouldUseAcousticEchoCanceler(JNIEnv*
    env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioManagerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AudioManagerAndroid_clazz,
      "shouldUseAcousticEchoCanceler",

"("
")"
"Z",
      &g_AudioManagerAndroid_shouldUseAcousticEchoCanceler);

  jboolean ret =
    env->CallStaticBooleanMethod(g_AudioManagerAndroid_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_AudioDeviceName_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kAudioDeviceNameClassPath).obj()));
  g_AudioManagerAndroid_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kAudioManagerAndroidClassPath).obj()));
  static const JNINativeMethod kMethodsAudioManagerAndroid[] = {
    { "nativeSetMute",
"("
"J"
"Z"
")"
"V", reinterpret_cast<void*>(SetMute) },
  };
  const int kMethodsAudioManagerAndroidSize =
      arraysize(kMethodsAudioManagerAndroid);

  if (env->RegisterNatives(g_AudioManagerAndroid_clazz,
                           kMethodsAudioManagerAndroid,
                           kMethodsAudioManagerAndroidSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace media

#endif  // org_chromium_media_AudioManagerAndroid_JNI
