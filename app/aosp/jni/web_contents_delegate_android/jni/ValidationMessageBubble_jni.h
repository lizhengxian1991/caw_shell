// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//
//    org/chromium/components/web_contents_delegate_android/ValidationMessageBubble

#ifndef org_chromium_components_web_contents_delegate_android_ValidationMessageBubble_JNI
#define org_chromium_components_web_contents_delegate_android_ValidationMessageBubble_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kValidationMessageBubbleClassPath[] =
    "org/chromium/components/web_contents_delegate_android/ValidationMessageBubble";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ValidationMessageBubble_clazz = NULL;
}  // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord g_ValidationMessageBubble_createAndShow = 0;
static ScopedJavaLocalRef<jobject>
    Java_ValidationMessageBubble_createAndShow(JNIEnv* env, jobject
    contentViewCore,
    jint anchorX,
    jint anchorY,
    jint anchorWidth,
    jint anchorHeight,
    jstring mainText,
    jstring subText) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ValidationMessageBubble_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ValidationMessageBubble_clazz,
      "createAndShow",

"("
"Lorg/chromium/content/browser/ContentViewCore;"
"I"
"I"
"I"
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Lorg/chromium/components/web_contents_delegate_android/ValidationMessageBubble;",
      &g_ValidationMessageBubble_createAndShow);

  jobject ret =
    env->CallStaticObjectMethod(g_ValidationMessageBubble_clazz,
      method_id, contentViewCore, anchorX, anchorY, anchorWidth, anchorHeight,
          mainText, subText);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ValidationMessageBubble_close = 0;
static void Java_ValidationMessageBubble_close(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ValidationMessageBubble_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ValidationMessageBubble_clazz,
      "close",

"("
")"
"V",
      &g_ValidationMessageBubble_close);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_ValidationMessageBubble_setPositionRelativeToAnchor = 0;
static void Java_ValidationMessageBubble_setPositionRelativeToAnchor(JNIEnv*
    env, jobject obj, jobject contentViewCore,
    jint anchorX,
    jint anchorY,
    jint anchorWidth,
    jint anchorHeight) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ValidationMessageBubble_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ValidationMessageBubble_clazz,
      "setPositionRelativeToAnchor",

"("
"Lorg/chromium/content/browser/ContentViewCore;"
"I"
"I"
"I"
"I"
")"
"V",
      &g_ValidationMessageBubble_setPositionRelativeToAnchor);

  env->CallVoidMethod(obj,
      method_id, contentViewCore, anchorX, anchorY, anchorWidth, anchorHeight);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_ValidationMessageBubble_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kValidationMessageBubbleClassPath).obj()));
  return true;
}

#endif  // org_chromium_components_web_contents_delegate_android_ValidationMessageBubble_JNI
