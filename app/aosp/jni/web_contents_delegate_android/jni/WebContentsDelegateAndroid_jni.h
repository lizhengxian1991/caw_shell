// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//
//    org/chromium/components/web_contents_delegate_android/WebContentsDelegateAndroid

#ifndef org_chromium_components_web_contents_delegate_android_WebContentsDelegateAndroid_JNI
#define org_chromium_components_web_contents_delegate_android_WebContentsDelegateAndroid_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kWebContentsDelegateAndroidClassPath[] =
    "org/chromium/components/web_contents_delegate_android/WebContentsDelegateAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_WebContentsDelegateAndroid_clazz = NULL;
}  // namespace

namespace web_contents_delegate_android {

// Step 2: method stubs.

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_openNewTab = 0;
static void Java_WebContentsDelegateAndroid_openNewTab(JNIEnv* env, jobject obj,
    jstring url,
    jstring extraHeaders,
    jbyteArray postData,
    jint disposition) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsDelegateAndroid_clazz,
      "openNewTab",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"[B"
"I"
")"
"V",
      &g_WebContentsDelegateAndroid_openNewTab);

  env->CallVoidMethod(obj,
      method_id, url, extraHeaders, postData, disposition);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_activateContents =
    0;
static void Java_WebContentsDelegateAndroid_activateContents(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsDelegateAndroid_clazz,
      "activateContents",

"("
")"
"V",
      &g_WebContentsDelegateAndroid_activateContents);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_closeContents = 0;
static void Java_WebContentsDelegateAndroid_closeContents(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsDelegateAndroid_clazz,
      "closeContents",

"("
")"
"V",
      &g_WebContentsDelegateAndroid_closeContents);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_onLoadStarted = 0;
static void Java_WebContentsDelegateAndroid_onLoadStarted(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsDelegateAndroid_clazz,
      "onLoadStarted",

"("
")"
"V",
      &g_WebContentsDelegateAndroid_onLoadStarted);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_onLoadStopped = 0;
static void Java_WebContentsDelegateAndroid_onLoadStopped(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsDelegateAndroid_clazz,
      "onLoadStopped",

"("
")"
"V",
      &g_WebContentsDelegateAndroid_onLoadStopped);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_WebContentsDelegateAndroid_navigationStateChanged = 0;
static void Java_WebContentsDelegateAndroid_navigationStateChanged(JNIEnv* env,
    jobject obj, jint flags) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsDelegateAndroid_clazz,
      "navigationStateChanged",

"("
"I"
")"
"V",
      &g_WebContentsDelegateAndroid_navigationStateChanged);

  env->CallVoidMethod(obj,
      method_id, flags);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_WebContentsDelegateAndroid_notifyLoadProgressChanged = 0;
static void Java_WebContentsDelegateAndroid_notifyLoadProgressChanged(JNIEnv*
    env, jobject obj, jdouble progress) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsDelegateAndroid_clazz,
      "notifyLoadProgressChanged",

"("
"D"
")"
"V",
      &g_WebContentsDelegateAndroid_notifyLoadProgressChanged);

  env->CallVoidMethod(obj,
      method_id, progress);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_WebContentsDelegateAndroid_rendererUnresponsive = 0;
static void Java_WebContentsDelegateAndroid_rendererUnresponsive(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsDelegateAndroid_clazz,
      "rendererUnresponsive",

"("
")"
"V",
      &g_WebContentsDelegateAndroid_rendererUnresponsive);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_rendererResponsive
    = 0;
static void Java_WebContentsDelegateAndroid_rendererResponsive(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsDelegateAndroid_clazz,
      "rendererResponsive",

"("
")"
"V",
      &g_WebContentsDelegateAndroid_rendererResponsive);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_onUpdateUrl = 0;
static void Java_WebContentsDelegateAndroid_onUpdateUrl(JNIEnv* env, jobject
    obj, jstring url) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsDelegateAndroid_clazz,
      "onUpdateUrl",

"("
"Ljava/lang/String;"
")"
"V",
      &g_WebContentsDelegateAndroid_onUpdateUrl);

  env->CallVoidMethod(obj,
      method_id, url);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_takeFocus = 0;
static jboolean Java_WebContentsDelegateAndroid_takeFocus(JNIEnv* env, jobject
    obj, jboolean reverse) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsDelegateAndroid_clazz,
      "takeFocus",

"("
"Z"
")"
"Z",
      &g_WebContentsDelegateAndroid_takeFocus);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id, reverse);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_handleKeyboardEvent
    = 0;
static void Java_WebContentsDelegateAndroid_handleKeyboardEvent(JNIEnv* env,
    jobject obj, jobject event) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsDelegateAndroid_clazz,
      "handleKeyboardEvent",

"("
"Landroid/view/KeyEvent;"
")"
"V",
      &g_WebContentsDelegateAndroid_handleKeyboardEvent);

  env->CallVoidMethod(obj,
      method_id, event);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebContentsDelegateAndroid_addMessageToConsole
    = 0;
static jboolean Java_WebContentsDelegateAndroid_addMessageToConsole(JNIEnv* env,
    jobject obj, jint level,
    jstring message,
    jint lineNumber,
    jstring sourceId) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsDelegateAndroid_clazz,
      "addMessageToConsole",

"("
"I"
"Ljava/lang/String;"
"I"
"Ljava/lang/String;"
")"
"Z",
      &g_WebContentsDelegateAndroid_addMessageToConsole);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id, level, message, lineNumber, sourceId);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_WebContentsDelegateAndroid_showRepostFormWarningDialog = 0;
static void Java_WebContentsDelegateAndroid_showRepostFormWarningDialog(JNIEnv*
    env, jobject obj, jobject contentViewCore) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsDelegateAndroid_clazz,
      "showRepostFormWarningDialog",

"("
"Lorg/chromium/content/browser/ContentViewCore;"
")"
"V",
      &g_WebContentsDelegateAndroid_showRepostFormWarningDialog);

  env->CallVoidMethod(obj,
      method_id, contentViewCore);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_WebContentsDelegateAndroid_toggleFullscreenModeForTab = 0;
static void Java_WebContentsDelegateAndroid_toggleFullscreenModeForTab(JNIEnv*
    env, jobject obj, jboolean enterFullscreen) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsDelegateAndroid_clazz,
      "toggleFullscreenModeForTab",

"("
"Z"
")"
"V",
      &g_WebContentsDelegateAndroid_toggleFullscreenModeForTab);

  env->CallVoidMethod(obj,
      method_id, enterFullscreen);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_WebContentsDelegateAndroid_isFullscreenForTabOrPending = 0;
static jboolean
    Java_WebContentsDelegateAndroid_isFullscreenForTabOrPending(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebContentsDelegateAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebContentsDelegateAndroid_clazz,
      "isFullscreenForTabOrPending",

"("
")"
"Z",
      &g_WebContentsDelegateAndroid_isFullscreenForTabOrPending);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_WebContentsDelegateAndroid_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kWebContentsDelegateAndroidClassPath).obj()));
  return true;
}
}  // namespace web_contents_delegate_android

#endif  // org_chromium_components_web_contents_delegate_android_WebContentsDelegateAndroid_JNI
