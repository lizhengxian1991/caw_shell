// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     android/view/ViewConfiguration

#ifndef android_view_ViewConfiguration_JNI
#define android_view_ViewConfiguration_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kViewConfigurationClassPath[] = "android/view/ViewConfiguration";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ViewConfiguration_clazz = NULL;
}  // namespace

namespace JNI_ViewConfiguration {

// Step 2: method stubs.

static base::subtle::AtomicWord g_ViewConfiguration_get = 0;
static ScopedJavaLocalRef<jobject> Java_ViewConfiguration_get(JNIEnv* env,
    jobject p0) __attribute__ ((unused));
static ScopedJavaLocalRef<jobject> Java_ViewConfiguration_get(JNIEnv* env,
    jobject p0) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "get",
      "(Landroid/content/Context;)Landroid/view/ViewConfiguration;",
      &g_ViewConfiguration_get);

  jobject ret =
    env->CallStaticObjectMethod(g_ViewConfiguration_clazz,
      method_id, p0);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ViewConfiguration_getScrollBarSize = 0;
static jint Java_ViewConfiguration_getScrollBarSize(JNIEnv* env) __attribute__
    ((unused));
static jint Java_ViewConfiguration_getScrollBarSize(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getScrollBarSize",
      "()I",
      &g_ViewConfiguration_getScrollBarSize);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getScaledScrollBarSize = 0;
static jint Java_ViewConfiguration_getScaledScrollBarSize(JNIEnv* env, jobject
    obj) __attribute__ ((unused));
static jint Java_ViewConfiguration_getScaledScrollBarSize(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ViewConfiguration_clazz,
      "getScaledScrollBarSize",
      "()I",
      &g_ViewConfiguration_getScaledScrollBarSize);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getScrollBarFadeDuration =
    0;
static jint Java_ViewConfiguration_getScrollBarFadeDuration(JNIEnv* env)
    __attribute__ ((unused));
static jint Java_ViewConfiguration_getScrollBarFadeDuration(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getScrollBarFadeDuration",
      "()I",
      &g_ViewConfiguration_getScrollBarFadeDuration);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getScrollDefaultDelay = 0;
static jint Java_ViewConfiguration_getScrollDefaultDelay(JNIEnv* env)
    __attribute__ ((unused));
static jint Java_ViewConfiguration_getScrollDefaultDelay(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getScrollDefaultDelay",
      "()I",
      &g_ViewConfiguration_getScrollDefaultDelay);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getFadingEdgeLength = 0;
static jint Java_ViewConfiguration_getFadingEdgeLength(JNIEnv* env)
    __attribute__ ((unused));
static jint Java_ViewConfiguration_getFadingEdgeLength(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getFadingEdgeLength",
      "()I",
      &g_ViewConfiguration_getFadingEdgeLength);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getScaledFadingEdgeLength =
    0;
static jint Java_ViewConfiguration_getScaledFadingEdgeLength(JNIEnv* env,
    jobject obj) __attribute__ ((unused));
static jint Java_ViewConfiguration_getScaledFadingEdgeLength(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ViewConfiguration_clazz,
      "getScaledFadingEdgeLength",
      "()I",
      &g_ViewConfiguration_getScaledFadingEdgeLength);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getPressedStateDuration = 0;
static jint Java_ViewConfiguration_getPressedStateDuration(JNIEnv* env)
    __attribute__ ((unused));
static jint Java_ViewConfiguration_getPressedStateDuration(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getPressedStateDuration",
      "()I",
      &g_ViewConfiguration_getPressedStateDuration);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getLongPressTimeout = 0;
static jint Java_ViewConfiguration_getLongPressTimeout(JNIEnv* env)
    __attribute__ ((unused));
static jint Java_ViewConfiguration_getLongPressTimeout(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getLongPressTimeout",
      "()I",
      &g_ViewConfiguration_getLongPressTimeout);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getKeyRepeatTimeout = 0;
static jint Java_ViewConfiguration_getKeyRepeatTimeout(JNIEnv* env)
    __attribute__ ((unused));
static jint Java_ViewConfiguration_getKeyRepeatTimeout(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getKeyRepeatTimeout",
      "()I",
      &g_ViewConfiguration_getKeyRepeatTimeout);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getKeyRepeatDelay = 0;
static jint Java_ViewConfiguration_getKeyRepeatDelay(JNIEnv* env) __attribute__
    ((unused));
static jint Java_ViewConfiguration_getKeyRepeatDelay(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getKeyRepeatDelay",
      "()I",
      &g_ViewConfiguration_getKeyRepeatDelay);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getTapTimeout = 0;
static jint Java_ViewConfiguration_getTapTimeout(JNIEnv* env) __attribute__
    ((unused));
static jint Java_ViewConfiguration_getTapTimeout(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getTapTimeout",
      "()I",
      &g_ViewConfiguration_getTapTimeout);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getJumpTapTimeout = 0;
static jint Java_ViewConfiguration_getJumpTapTimeout(JNIEnv* env) __attribute__
    ((unused));
static jint Java_ViewConfiguration_getJumpTapTimeout(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getJumpTapTimeout",
      "()I",
      &g_ViewConfiguration_getJumpTapTimeout);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getDoubleTapTimeout = 0;
static jint Java_ViewConfiguration_getDoubleTapTimeout(JNIEnv* env)
    __attribute__ ((unused));
static jint Java_ViewConfiguration_getDoubleTapTimeout(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getDoubleTapTimeout",
      "()I",
      &g_ViewConfiguration_getDoubleTapTimeout);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getEdgeSlop = 0;
static jint Java_ViewConfiguration_getEdgeSlop(JNIEnv* env) __attribute__
    ((unused));
static jint Java_ViewConfiguration_getEdgeSlop(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getEdgeSlop",
      "()I",
      &g_ViewConfiguration_getEdgeSlop);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getScaledEdgeSlop = 0;
static jint Java_ViewConfiguration_getScaledEdgeSlop(JNIEnv* env, jobject obj)
    __attribute__ ((unused));
static jint Java_ViewConfiguration_getScaledEdgeSlop(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ViewConfiguration_clazz,
      "getScaledEdgeSlop",
      "()I",
      &g_ViewConfiguration_getScaledEdgeSlop);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getTouchSlop = 0;
static jint Java_ViewConfiguration_getTouchSlop(JNIEnv* env) __attribute__
    ((unused));
static jint Java_ViewConfiguration_getTouchSlop(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getTouchSlop",
      "()I",
      &g_ViewConfiguration_getTouchSlop);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getScaledTouchSlop = 0;
static jint Java_ViewConfiguration_getScaledTouchSlop(JNIEnv* env, jobject obj)
    __attribute__ ((unused));
static jint Java_ViewConfiguration_getScaledTouchSlop(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ViewConfiguration_clazz,
      "getScaledTouchSlop",
      "()I",
      &g_ViewConfiguration_getScaledTouchSlop);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getScaledPagingTouchSlop =
    0;
static jint Java_ViewConfiguration_getScaledPagingTouchSlop(JNIEnv* env, jobject
    obj) __attribute__ ((unused));
static jint Java_ViewConfiguration_getScaledPagingTouchSlop(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ViewConfiguration_clazz,
      "getScaledPagingTouchSlop",
      "()I",
      &g_ViewConfiguration_getScaledPagingTouchSlop);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getScaledDoubleTapSlop = 0;
static jint Java_ViewConfiguration_getScaledDoubleTapSlop(JNIEnv* env, jobject
    obj) __attribute__ ((unused));
static jint Java_ViewConfiguration_getScaledDoubleTapSlop(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ViewConfiguration_clazz,
      "getScaledDoubleTapSlop",
      "()I",
      &g_ViewConfiguration_getScaledDoubleTapSlop);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getWindowTouchSlop = 0;
static jint Java_ViewConfiguration_getWindowTouchSlop(JNIEnv* env) __attribute__
    ((unused));
static jint Java_ViewConfiguration_getWindowTouchSlop(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getWindowTouchSlop",
      "()I",
      &g_ViewConfiguration_getWindowTouchSlop);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getScaledWindowTouchSlop =
    0;
static jint Java_ViewConfiguration_getScaledWindowTouchSlop(JNIEnv* env, jobject
    obj) __attribute__ ((unused));
static jint Java_ViewConfiguration_getScaledWindowTouchSlop(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ViewConfiguration_clazz,
      "getScaledWindowTouchSlop",
      "()I",
      &g_ViewConfiguration_getScaledWindowTouchSlop);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getMinimumFlingVelocity = 0;
static jint Java_ViewConfiguration_getMinimumFlingVelocity(JNIEnv* env)
    __attribute__ ((unused));
static jint Java_ViewConfiguration_getMinimumFlingVelocity(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getMinimumFlingVelocity",
      "()I",
      &g_ViewConfiguration_getMinimumFlingVelocity);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_ViewConfiguration_getScaledMinimumFlingVelocity = 0;
static jint Java_ViewConfiguration_getScaledMinimumFlingVelocity(JNIEnv* env,
    jobject obj) __attribute__ ((unused));
static jint Java_ViewConfiguration_getScaledMinimumFlingVelocity(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ViewConfiguration_clazz,
      "getScaledMinimumFlingVelocity",
      "()I",
      &g_ViewConfiguration_getScaledMinimumFlingVelocity);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getMaximumFlingVelocity = 0;
static jint Java_ViewConfiguration_getMaximumFlingVelocity(JNIEnv* env)
    __attribute__ ((unused));
static jint Java_ViewConfiguration_getMaximumFlingVelocity(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getMaximumFlingVelocity",
      "()I",
      &g_ViewConfiguration_getMaximumFlingVelocity);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_ViewConfiguration_getScaledMaximumFlingVelocity = 0;
static jint Java_ViewConfiguration_getScaledMaximumFlingVelocity(JNIEnv* env,
    jobject obj) __attribute__ ((unused));
static jint Java_ViewConfiguration_getScaledMaximumFlingVelocity(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ViewConfiguration_clazz,
      "getScaledMaximumFlingVelocity",
      "()I",
      &g_ViewConfiguration_getScaledMaximumFlingVelocity);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getMaximumDrawingCacheSize =
    0;
static jint Java_ViewConfiguration_getMaximumDrawingCacheSize(JNIEnv* env)
    __attribute__ ((unused));
static jint Java_ViewConfiguration_getMaximumDrawingCacheSize(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getMaximumDrawingCacheSize",
      "()I",
      &g_ViewConfiguration_getMaximumDrawingCacheSize);

  jint ret =
    env->CallStaticIntMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_ViewConfiguration_getScaledMaximumDrawingCacheSize = 0;
static jint Java_ViewConfiguration_getScaledMaximumDrawingCacheSize(JNIEnv* env,
    jobject obj) __attribute__ ((unused));
static jint Java_ViewConfiguration_getScaledMaximumDrawingCacheSize(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ViewConfiguration_clazz,
      "getScaledMaximumDrawingCacheSize",
      "()I",
      &g_ViewConfiguration_getScaledMaximumDrawingCacheSize);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getScaledOverscrollDistance
    = 0;
static jint Java_ViewConfiguration_getScaledOverscrollDistance(JNIEnv* env,
    jobject obj) __attribute__ ((unused));
static jint Java_ViewConfiguration_getScaledOverscrollDistance(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ViewConfiguration_clazz,
      "getScaledOverscrollDistance",
      "()I",
      &g_ViewConfiguration_getScaledOverscrollDistance);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getScaledOverflingDistance =
    0;
static jint Java_ViewConfiguration_getScaledOverflingDistance(JNIEnv* env,
    jobject obj) __attribute__ ((unused));
static jint Java_ViewConfiguration_getScaledOverflingDistance(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ViewConfiguration_clazz,
      "getScaledOverflingDistance",
      "()I",
      &g_ViewConfiguration_getScaledOverflingDistance);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getZoomControlsTimeout = 0;
static jlong Java_ViewConfiguration_getZoomControlsTimeout(JNIEnv* env)
    __attribute__ ((unused));
static jlong Java_ViewConfiguration_getZoomControlsTimeout(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getZoomControlsTimeout",
      "()J",
      &g_ViewConfiguration_getZoomControlsTimeout);

  jlong ret =
    env->CallStaticLongMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getGlobalActionKeyTimeout =
    0;
static jlong Java_ViewConfiguration_getGlobalActionKeyTimeout(JNIEnv* env)
    __attribute__ ((unused));
static jlong Java_ViewConfiguration_getGlobalActionKeyTimeout(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getGlobalActionKeyTimeout",
      "()J",
      &g_ViewConfiguration_getGlobalActionKeyTimeout);

  jlong ret =
    env->CallStaticLongMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_getScrollFriction = 0;
static jfloat Java_ViewConfiguration_getScrollFriction(JNIEnv* env)
    __attribute__ ((unused));
static jfloat Java_ViewConfiguration_getScrollFriction(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ViewConfiguration_clazz,
      "getScrollFriction",
      "()F",
      &g_ViewConfiguration_getScrollFriction);

  jfloat ret =
    env->CallStaticFloatMethod(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_hasPermanentMenuKey = 0;
static jboolean Java_ViewConfiguration_hasPermanentMenuKey(JNIEnv* env, jobject
    obj) __attribute__ ((unused));
static jboolean Java_ViewConfiguration_hasPermanentMenuKey(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ViewConfiguration_clazz,
      "hasPermanentMenuKey",
      "()Z",
      &g_ViewConfiguration_hasPermanentMenuKey);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ViewConfiguration_Constructor = 0;
static ScopedJavaLocalRef<jobject> Java_ViewConfiguration_Constructor(JNIEnv*
    env) __attribute__ ((unused));
static ScopedJavaLocalRef<jobject> Java_ViewConfiguration_Constructor(JNIEnv*
    env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ViewConfiguration_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ViewConfiguration_clazz,
      "<init>",
      "()V",
      &g_ViewConfiguration_Constructor);

  jobject ret =
    env->NewObject(g_ViewConfiguration_clazz,
      method_id);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_ViewConfiguration_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kViewConfigurationClassPath).obj()));
  return true;
}
}  // namespace JNI_ViewConfiguration

#endif  // android_view_ViewConfiguration_JNI
