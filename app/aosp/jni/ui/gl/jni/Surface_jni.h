// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     android/view/Surface

#ifndef android_view_Surface_JNI
#define android_view_Surface_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSurfaceClassPath[] = "android/view/Surface";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_Surface_clazz = NULL;
}  // namespace

namespace JNI_Surface {

// Step 2: method stubs.

static base::subtle::AtomicWord g_Surface_finalize = 0;
static void Java_Surface_finalize(JNIEnv* env, jobject obj) __attribute__
    ((unused));
static void Java_Surface_finalize(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Surface_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_Surface_clazz,
      "finalize",
      "()V",
      &g_Surface_finalize);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_Surface_release = 0;
static void Java_Surface_release(JNIEnv* env, jobject obj) __attribute__
    ((unused));
static void Java_Surface_release(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Surface_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_Surface_clazz,
      "release",
      "()V",
      &g_Surface_release);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_Surface_isValid = 0;
static jboolean Java_Surface_isValid(JNIEnv* env, jobject obj) __attribute__
    ((unused));
static jboolean Java_Surface_isValid(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Surface_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_Surface_clazz,
      "isValid",
      "()Z",
      &g_Surface_isValid);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_Surface_lockCanvas = 0;
static ScopedJavaLocalRef<jobject> Java_Surface_lockCanvas(JNIEnv* env, jobject
    obj, jobject p0) __attribute__ ((unused));
static ScopedJavaLocalRef<jobject> Java_Surface_lockCanvas(JNIEnv* env, jobject
    obj, jobject p0) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Surface_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_Surface_clazz,
      "lockCanvas",
      "(Landroid/graphics/Rect;)Landroid/graphics/Canvas;",
      &g_Surface_lockCanvas);

  jobject ret =
    env->CallObjectMethod(obj,
      method_id, p0);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_Surface_unlockCanvasAndPost = 0;
static void Java_Surface_unlockCanvasAndPost(JNIEnv* env, jobject obj, jobject
    p0) __attribute__ ((unused));
static void Java_Surface_unlockCanvasAndPost(JNIEnv* env, jobject obj, jobject
    p0) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Surface_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_Surface_clazz,
      "unlockCanvasAndPost",
      "(Landroid/graphics/Canvas;)V",
      &g_Surface_unlockCanvasAndPost);

  env->CallVoidMethod(obj,
      method_id, p0);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_Surface_unlockCanvas = 0;
static void Java_Surface_unlockCanvas(JNIEnv* env, jobject obj, jobject p0)
    __attribute__ ((unused));
static void Java_Surface_unlockCanvas(JNIEnv* env, jobject obj, jobject p0) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Surface_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_Surface_clazz,
      "unlockCanvas",
      "(Landroid/graphics/Canvas;)V",
      &g_Surface_unlockCanvas);

  env->CallVoidMethod(obj,
      method_id, p0);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_Surface_describeContents = 0;
static jint Java_Surface_describeContents(JNIEnv* env, jobject obj)
    __attribute__ ((unused));
static jint Java_Surface_describeContents(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Surface_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_Surface_clazz,
      "describeContents",
      "()I",
      &g_Surface_describeContents);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_Surface_readFromParcel = 0;
static void Java_Surface_readFromParcel(JNIEnv* env, jobject obj, jobject p0)
    __attribute__ ((unused));
static void Java_Surface_readFromParcel(JNIEnv* env, jobject obj, jobject p0) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Surface_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_Surface_clazz,
      "readFromParcel",
      "(Landroid/os/Parcel;)V",
      &g_Surface_readFromParcel);

  env->CallVoidMethod(obj,
      method_id, p0);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_Surface_writeToParcel = 0;
static void Java_Surface_writeToParcel(JNIEnv* env, jobject obj, jobject p0,
    jint p1) __attribute__ ((unused));
static void Java_Surface_writeToParcel(JNIEnv* env, jobject obj, jobject p0,
    jint p1) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Surface_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_Surface_clazz,
      "writeToParcel",
      "(Landroid/os/Parcel;I)V",
      &g_Surface_writeToParcel);

  env->CallVoidMethod(obj,
      method_id, p0, p1);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_Surface_toString = 0;
static ScopedJavaLocalRef<jstring> Java_Surface_toString(JNIEnv* env, jobject
    obj) __attribute__ ((unused));
static ScopedJavaLocalRef<jstring> Java_Surface_toString(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Surface_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_Surface_clazz,
      "toString",
      "()Ljava/lang/String;",
      &g_Surface_toString);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_Surface_Constructor = 0;
static ScopedJavaLocalRef<jobject> Java_Surface_Constructor(JNIEnv* env, jobject
    p0) __attribute__ ((unused));
static ScopedJavaLocalRef<jobject> Java_Surface_Constructor(JNIEnv* env, jobject
    p0) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Surface_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_Surface_clazz,
      "<init>",
      "(Landroid/graphics/SurfaceTexture;)V",
      &g_Surface_Constructor);

  jobject ret =
    env->NewObject(g_Surface_clazz,
      method_id, p0);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_Surface_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSurfaceClassPath).obj()));
  return true;
}
}  // namespace JNI_Surface

#endif  // android_view_Surface_JNI
