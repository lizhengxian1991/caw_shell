// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/gl/SurfaceTexturePlatformWrapper

#ifndef org_chromium_ui_gl_SurfaceTexturePlatformWrapper_JNI
#define org_chromium_ui_gl_SurfaceTexturePlatformWrapper_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSurfaceTexturePlatformWrapperClassPath[] =
    "org/chromium/ui/gl/SurfaceTexturePlatformWrapper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SurfaceTexturePlatformWrapper_clazz = NULL;
}  // namespace

namespace gfx {

// Step 2: method stubs.

static base::subtle::AtomicWord g_SurfaceTexturePlatformWrapper_create = 0;
static ScopedJavaLocalRef<jobject>
    Java_SurfaceTexturePlatformWrapper_create(JNIEnv* env, jint textureId) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SurfaceTexturePlatformWrapper_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SurfaceTexturePlatformWrapper_clazz,
      "create",

"("
"I"
")"
"Landroid/graphics/SurfaceTexture;",
      &g_SurfaceTexturePlatformWrapper_create);

  jobject ret =
    env->CallStaticObjectMethod(g_SurfaceTexturePlatformWrapper_clazz,
      method_id, textureId);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SurfaceTexturePlatformWrapper_destroy = 0;
static void Java_SurfaceTexturePlatformWrapper_destroy(JNIEnv* env, jobject
    surfaceTexture) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SurfaceTexturePlatformWrapper_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SurfaceTexturePlatformWrapper_clazz,
      "destroy",

"("
"Landroid/graphics/SurfaceTexture;"
")"
"V",
      &g_SurfaceTexturePlatformWrapper_destroy);

  env->CallStaticVoidMethod(g_SurfaceTexturePlatformWrapper_clazz,
      method_id, surfaceTexture);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_SurfaceTexturePlatformWrapper_setFrameAvailableCallback = 0;
static void Java_SurfaceTexturePlatformWrapper_setFrameAvailableCallback(JNIEnv*
    env, jobject surfaceTexture,
    jlong nativeSurfaceTextureListener) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SurfaceTexturePlatformWrapper_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SurfaceTexturePlatformWrapper_clazz,
      "setFrameAvailableCallback",

"("
"Landroid/graphics/SurfaceTexture;"
"J"
")"
"V",
      &g_SurfaceTexturePlatformWrapper_setFrameAvailableCallback);

  env->CallStaticVoidMethod(g_SurfaceTexturePlatformWrapper_clazz,
      method_id, surfaceTexture, nativeSurfaceTextureListener);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SurfaceTexturePlatformWrapper_updateTexImage =
    0;
static void Java_SurfaceTexturePlatformWrapper_updateTexImage(JNIEnv* env,
    jobject surfaceTexture) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SurfaceTexturePlatformWrapper_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SurfaceTexturePlatformWrapper_clazz,
      "updateTexImage",

"("
"Landroid/graphics/SurfaceTexture;"
")"
"V",
      &g_SurfaceTexturePlatformWrapper_updateTexImage);

  env->CallStaticVoidMethod(g_SurfaceTexturePlatformWrapper_clazz,
      method_id, surfaceTexture);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_SurfaceTexturePlatformWrapper_setDefaultBufferSize = 0;
static void Java_SurfaceTexturePlatformWrapper_setDefaultBufferSize(JNIEnv* env,
    jobject surfaceTexture,
    jint width,
    jint height) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SurfaceTexturePlatformWrapper_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SurfaceTexturePlatformWrapper_clazz,
      "setDefaultBufferSize",

"("
"Landroid/graphics/SurfaceTexture;"
"I"
"I"
")"
"V",
      &g_SurfaceTexturePlatformWrapper_setDefaultBufferSize);

  env->CallStaticVoidMethod(g_SurfaceTexturePlatformWrapper_clazz,
      method_id, surfaceTexture, width, height);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_SurfaceTexturePlatformWrapper_getTransformMatrix = 0;
static void Java_SurfaceTexturePlatformWrapper_getTransformMatrix(JNIEnv* env,
    jobject surfaceTexture,
    jfloatArray matrix) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SurfaceTexturePlatformWrapper_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SurfaceTexturePlatformWrapper_clazz,
      "getTransformMatrix",

"("
"Landroid/graphics/SurfaceTexture;"
"[F"
")"
"V",
      &g_SurfaceTexturePlatformWrapper_getTransformMatrix);

  env->CallStaticVoidMethod(g_SurfaceTexturePlatformWrapper_clazz,
      method_id, surfaceTexture, matrix);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_SurfaceTexturePlatformWrapper_attachToGLContext = 0;
static void Java_SurfaceTexturePlatformWrapper_attachToGLContext(JNIEnv* env,
    jobject surfaceTexture,
    jint texName) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SurfaceTexturePlatformWrapper_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SurfaceTexturePlatformWrapper_clazz,
      "attachToGLContext",

"("
"Landroid/graphics/SurfaceTexture;"
"I"
")"
"V",
      &g_SurfaceTexturePlatformWrapper_attachToGLContext);

  env->CallStaticVoidMethod(g_SurfaceTexturePlatformWrapper_clazz,
      method_id, surfaceTexture, texName);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_SurfaceTexturePlatformWrapper_detachFromGLContext = 0;
static void Java_SurfaceTexturePlatformWrapper_detachFromGLContext(JNIEnv* env,
    jobject surfaceTexture) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SurfaceTexturePlatformWrapper_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SurfaceTexturePlatformWrapper_clazz,
      "detachFromGLContext",

"("
"Landroid/graphics/SurfaceTexture;"
")"
"V",
      &g_SurfaceTexturePlatformWrapper_detachFromGLContext);

  env->CallStaticVoidMethod(g_SurfaceTexturePlatformWrapper_clazz,
      method_id, surfaceTexture);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SurfaceTexturePlatformWrapper_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kSurfaceTexturePlatformWrapperClassPath).obj()));
  return true;
}
}  // namespace gfx

#endif  // org_chromium_ui_gl_SurfaceTexturePlatformWrapper_JNI
