// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/gl/SurfaceTextureListener

#ifndef org_chromium_ui_gl_SurfaceTextureListener_JNI
#define org_chromium_ui_gl_SurfaceTextureListener_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSurfaceTextureListenerClassPath[] =
    "org/chromium/ui/gl/SurfaceTextureListener";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SurfaceTextureListener_clazz = NULL;
}  // namespace

namespace gfx {

// Step 2: method stubs.
static void FrameAvailable(JNIEnv* env, jobject obj,
    jlong nativeSurfaceTextureListener) {
  DCHECK(nativeSurfaceTextureListener) << "FrameAvailable";
  SurfaceTextureListener* native =
      reinterpret_cast<SurfaceTextureListener*>(nativeSurfaceTextureListener);
  return native->FrameAvailable(env, obj);
}

static void Destroy(JNIEnv* env, jobject obj,
    jlong nativeSurfaceTextureListener) {
  DCHECK(nativeSurfaceTextureListener) << "Destroy";
  SurfaceTextureListener* native =
      reinterpret_cast<SurfaceTextureListener*>(nativeSurfaceTextureListener);
  return native->Destroy(env, obj);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SurfaceTextureListener_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSurfaceTextureListenerClassPath).obj()));
  static const JNINativeMethod kMethodsSurfaceTextureListener[] = {
    { "nativeFrameAvailable",
"("
"J"
")"
"V", reinterpret_cast<void*>(FrameAvailable) },
    { "nativeDestroy",
"("
"J"
")"
"V", reinterpret_cast<void*>(Destroy) },
  };
  const int kMethodsSurfaceTextureListenerSize =
      arraysize(kMethodsSurfaceTextureListener);

  if (env->RegisterNatives(g_SurfaceTextureListener_clazz,
                           kMethodsSurfaceTextureListener,
                           kMethodsSurfaceTextureListenerSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace gfx

#endif  // org_chromium_ui_gl_SurfaceTextureListener_JNI
