// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/base/ViewAndroid

#ifndef org_chromium_ui_base_ViewAndroid_JNI
#define org_chromium_ui_base_ViewAndroid_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kViewAndroidClassPath[] =
    "org/chromium/ui/base/ViewAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ViewAndroid_clazz = NULL;
}  // namespace

namespace ui {

static jlong Init(JNIEnv* env, jobject obj,
    jlong windowPtr);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jlong nativeViewAndroid) {
  DCHECK(nativeViewAndroid) << "Destroy";
  ViewAndroid* native = reinterpret_cast<ViewAndroid*>(nativeViewAndroid);
  return native->Destroy(env, obj);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_ViewAndroid_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kViewAndroidClassPath).obj()));
  static const JNINativeMethod kMethodsViewAndroid[] = {
    { "nativeInit",
"("
"J"
")"
"J", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"J"
")"
"V", reinterpret_cast<void*>(Destroy) },
  };
  const int kMethodsViewAndroidSize = arraysize(kMethodsViewAndroid);

  if (env->RegisterNatives(g_ViewAndroid_clazz,
                           kMethodsViewAndroid,
                           kMethodsViewAndroidSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace ui

#endif  // org_chromium_ui_base_ViewAndroid_JNI
