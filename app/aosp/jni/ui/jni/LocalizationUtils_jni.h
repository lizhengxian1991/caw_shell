// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/base/LocalizationUtils

#ifndef org_chromium_ui_base_LocalizationUtils_JNI
#define org_chromium_ui_base_LocalizationUtils_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kLocalizationUtilsClassPath[] =
    "org/chromium/ui/base/LocalizationUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_LocalizationUtils_clazz = NULL;
}  // namespace

namespace l10n_util {

static jboolean IsRTL(JNIEnv* env, jclass clazz);

static jint GetFirstStrongCharacterDirection(JNIEnv* env, jclass clazz,
    jstring string);

static jstring GetDurationString(JNIEnv* env, jclass clazz,
    jlong timeInMillis);

// Step 2: method stubs.

static base::subtle::AtomicWord g_LocalizationUtils_getDefaultLocale = 0;
static ScopedJavaLocalRef<jstring>
    Java_LocalizationUtils_getDefaultLocale(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_LocalizationUtils_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_LocalizationUtils_clazz,
      "getDefaultLocale",

"("
")"
"Ljava/lang/String;",
      &g_LocalizationUtils_getDefaultLocale);

  jstring ret =
    static_cast<jstring>(env->CallStaticObjectMethod(g_LocalizationUtils_clazz,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_LocalizationUtils_getJavaLocale = 0;
static ScopedJavaLocalRef<jobject> Java_LocalizationUtils_getJavaLocale(JNIEnv*
    env, jstring language,
    jstring country,
    jstring variant) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_LocalizationUtils_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_LocalizationUtils_clazz,
      "getJavaLocale",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Ljava/util/Locale;",
      &g_LocalizationUtils_getJavaLocale);

  jobject ret =
    env->CallStaticObjectMethod(g_LocalizationUtils_clazz,
      method_id, language, country, variant);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_LocalizationUtils_getDisplayNameForLocale = 0;
static ScopedJavaLocalRef<jstring>
    Java_LocalizationUtils_getDisplayNameForLocale(JNIEnv* env, jobject locale,
    jobject displayLocale) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_LocalizationUtils_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_LocalizationUtils_clazz,
      "getDisplayNameForLocale",

"("
"Ljava/util/Locale;"
"Ljava/util/Locale;"
")"
"Ljava/lang/String;",
      &g_LocalizationUtils_getDisplayNameForLocale);

  jstring ret =
    static_cast<jstring>(env->CallStaticObjectMethod(g_LocalizationUtils_clazz,
      method_id, locale, displayLocale));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_LocalizationUtils_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kLocalizationUtilsClassPath).obj()));
  static const JNINativeMethod kMethodsLocalizationUtils[] = {
    { "nativeIsRTL",
"("
")"
"Z", reinterpret_cast<void*>(IsRTL) },
    { "nativeGetFirstStrongCharacterDirection",
"("
"Ljava/lang/String;"
")"
"I", reinterpret_cast<void*>(GetFirstStrongCharacterDirection) },
    { "nativeGetDurationString",
"("
"J"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetDurationString) },
  };
  const int kMethodsLocalizationUtilsSize =
      arraysize(kMethodsLocalizationUtils);

  if (env->RegisterNatives(g_LocalizationUtils_clazz,
                           kMethodsLocalizationUtils,
                           kMethodsLocalizationUtilsSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace l10n_util

#endif  // org_chromium_ui_base_LocalizationUtils_JNI
