// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/base/WindowAndroid

#ifndef org_chromium_ui_base_WindowAndroid_JNI
#define org_chromium_ui_base_WindowAndroid_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kWindowAndroidClassPath[] =
    "org/chromium/ui/base/WindowAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_WindowAndroid_clazz = NULL;
}  // namespace

namespace ui {

static jlong Init(JNIEnv* env, jobject obj);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jlong nativeWindowAndroid) {
  DCHECK(nativeWindowAndroid) << "Destroy";
  WindowAndroid* native = reinterpret_cast<WindowAndroid*>(nativeWindowAndroid);
  return native->Destroy(env, obj);
}

static base::subtle::AtomicWord g_WindowAndroid_grabSnapshot = 0;
static ScopedJavaLocalRef<jbyteArray> Java_WindowAndroid_grabSnapshot(JNIEnv*
    env, jobject obj, jint windowX,
    jint windowY,
    jint width,
    jint height) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WindowAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WindowAndroid_clazz,
      "grabSnapshot",

"("
"I"
"I"
"I"
"I"
")"
"[B",
      &g_WindowAndroid_grabSnapshot);

  jbyteArray ret =
    static_cast<jbyteArray>(env->CallObjectMethod(obj,
      method_id, windowX, windowY, width, height));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jbyteArray>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_WindowAndroid_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kWindowAndroidClassPath).obj()));
  static const JNINativeMethod kMethodsWindowAndroid[] = {
    { "nativeInit",
"("
")"
"J", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"J"
")"
"V", reinterpret_cast<void*>(Destroy) },
  };
  const int kMethodsWindowAndroidSize = arraysize(kMethodsWindowAndroid);

  if (env->RegisterNatives(g_WindowAndroid_clazz,
                           kMethodsWindowAndroid,
                           kMethodsWindowAndroidSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace ui

#endif  // org_chromium_ui_base_WindowAndroid_JNI
