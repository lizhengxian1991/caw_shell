// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/base/Clipboard

#ifndef org_chromium_ui_base_Clipboard_JNI
#define org_chromium_ui_base_Clipboard_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kClipboardClassPath[] = "org/chromium/ui/base/Clipboard";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_Clipboard_clazz = NULL;
}  // namespace

namespace ui {

// Step 2: method stubs.

static base::subtle::AtomicWord g_Clipboard_create = 0;
static ScopedJavaLocalRef<jobject> Java_Clipboard_create(JNIEnv* env, jobject
    context) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Clipboard_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_Clipboard_clazz,
      "create",

"("
"Landroid/content/Context;"
")"
"Lorg/chromium/ui/base/Clipboard;",
      &g_Clipboard_create);

  jobject ret =
    env->CallStaticObjectMethod(g_Clipboard_clazz,
      method_id, context);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_Clipboard_getCoercedText = 0;
static ScopedJavaLocalRef<jstring> Java_Clipboard_getCoercedText(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Clipboard_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_Clipboard_clazz,
      "getCoercedText",

"("
")"
"Ljava/lang/String;",
      &g_Clipboard_getCoercedText);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_Clipboard_getHTMLText = 0;
static ScopedJavaLocalRef<jstring> Java_Clipboard_getHTMLText(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Clipboard_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_Clipboard_clazz,
      "getHTMLText",

"("
")"
"Ljava/lang/String;",
      &g_Clipboard_getHTMLText);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_Clipboard_setText = 0;
static void Java_Clipboard_setText(JNIEnv* env, jobject obj, jstring text) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Clipboard_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_Clipboard_clazz,
      "setText",

"("
"Ljava/lang/String;"
")"
"V",
      &g_Clipboard_setText);

  env->CallVoidMethod(obj,
      method_id, text);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_Clipboard_setHTMLText = 0;
static void Java_Clipboard_setHTMLText(JNIEnv* env, jobject obj, jstring html,
    jstring text) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Clipboard_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_Clipboard_clazz,
      "setHTMLText",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_Clipboard_setHTMLText);

  env->CallVoidMethod(obj,
      method_id, html, text);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_Clipboard_isHTMLClipboardSupported = 0;
static jboolean Java_Clipboard_isHTMLClipboardSupported(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_Clipboard_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_Clipboard_clazz,
      "isHTMLClipboardSupported",

"("
")"
"Z",
      &g_Clipboard_isHTMLClipboardSupported);

  jboolean ret =
    env->CallStaticBooleanMethod(g_Clipboard_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_Clipboard_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kClipboardClassPath).obj()));
  return true;
}
}  // namespace ui

#endif  // org_chromium_ui_base_Clipboard_JNI
